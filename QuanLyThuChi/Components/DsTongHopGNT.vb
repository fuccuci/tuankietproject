'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsTongHopGNT
    Inherits DataSet
    
    Private tablevalueNgay As valueNgayDataTable
    
    Private tableQryGNTNopThu As QryGNTNopThuDataTable
    
    Private tableqryCountry As qryCountryDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("valueNgay")) Is Nothing) Then
                Me.Tables.Add(New valueNgayDataTable(ds.Tables("valueNgay")))
            End If
            If (Not (ds.Tables("QryGNTNopThu")) Is Nothing) Then
                Me.Tables.Add(New QryGNTNopThuDataTable(ds.Tables("QryGNTNopThu")))
            End If
            If (Not (ds.Tables("qryCountry")) Is Nothing) Then
                Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property valueNgay As valueNgayDataTable
        Get
            Return Me.tablevalueNgay
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QryGNTNopThu As QryGNTNopThuDataTable
        Get
            Return Me.tableQryGNTNopThu
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryCountry As qryCountryDataTable
        Get
            Return Me.tableqryCountry
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsTongHopGNT = CType(MyBase.Clone,DsTongHopGNT)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("valueNgay")) Is Nothing) Then
            Me.Tables.Add(New valueNgayDataTable(ds.Tables("valueNgay")))
        End If
        If (Not (ds.Tables("QryGNTNopThu")) Is Nothing) Then
            Me.Tables.Add(New QryGNTNopThuDataTable(ds.Tables("QryGNTNopThu")))
        End If
        If (Not (ds.Tables("qryCountry")) Is Nothing) Then
            Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablevalueNgay = CType(Me.Tables("valueNgay"),valueNgayDataTable)
        If (Not (Me.tablevalueNgay) Is Nothing) Then
            Me.tablevalueNgay.InitVars
        End If
        Me.tableQryGNTNopThu = CType(Me.Tables("QryGNTNopThu"),QryGNTNopThuDataTable)
        If (Not (Me.tableQryGNTNopThu) Is Nothing) Then
            Me.tableQryGNTNopThu.InitVars
        End If
        Me.tableqryCountry = CType(Me.Tables("qryCountry"),qryCountryDataTable)
        If (Not (Me.tableqryCountry) Is Nothing) Then
            Me.tableqryCountry.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsTongHopGNT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsTongHopGNT.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablevalueNgay = New valueNgayDataTable
        Me.Tables.Add(Me.tablevalueNgay)
        Me.tableQryGNTNopThu = New QryGNTNopThuDataTable
        Me.Tables.Add(Me.tableQryGNTNopThu)
        Me.tableqryCountry = New qryCountryDataTable
        Me.Tables.Add(Me.tableqryCountry)
    End Sub
    
    Private Function ShouldSerializevalueNgay() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQryGNTNopThu() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryCountry() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub valueNgayRowChangeEventHandler(ByVal sender As Object, ByVal e As valueNgayRowChangeEvent)
    
    Public Delegate Sub QryGNTNopThuRowChangeEventHandler(ByVal sender As Object, ByVal e As QryGNTNopThuRowChangeEvent)
    
    Public Delegate Sub qryCountryRowChangeEventHandler(ByVal sender As Object, ByVal e As qryCountryRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class valueNgayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTuNgay As DataColumn
        
        Private columnDenNgay As DataColumn
        
        Friend Sub New()
            MyBase.New("valueNgay")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TuNgayColumn As DataColumn
            Get
                Return Me.columnTuNgay
            End Get
        End Property
        
        Friend ReadOnly Property DenNgayColumn As DataColumn
            Get
                Return Me.columnDenNgay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As valueNgayRow
            Get
                Return CType(Me.Rows(index),valueNgayRow)
            End Get
        End Property
        
        Public Event valueNgayRowChanged As valueNgayRowChangeEventHandler
        
        Public Event valueNgayRowChanging As valueNgayRowChangeEventHandler
        
        Public Event valueNgayRowDeleted As valueNgayRowChangeEventHandler
        
        Public Event valueNgayRowDeleting As valueNgayRowChangeEventHandler
        
        Public Overloads Sub AddvalueNgayRow(ByVal row As valueNgayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddvalueNgayRow(ByVal TuNgay As String, ByVal DenNgay As String) As valueNgayRow
            Dim rowvalueNgayRow As valueNgayRow = CType(Me.NewRow,valueNgayRow)
            rowvalueNgayRow.ItemArray = New Object() {TuNgay, DenNgay}
            Me.Rows.Add(rowvalueNgayRow)
            Return rowvalueNgayRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As valueNgayDataTable = CType(MyBase.Clone,valueNgayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New valueNgayDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTuNgay = Me.Columns("TuNgay")
            Me.columnDenNgay = Me.Columns("DenNgay")
        End Sub
        
        Private Sub InitClass()
            Me.columnTuNgay = New DataColumn("TuNgay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTuNgay)
            Me.columnDenNgay = New DataColumn("DenNgay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDenNgay)
        End Sub
        
        Public Function NewvalueNgayRow() As valueNgayRow
            Return CType(Me.NewRow,valueNgayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New valueNgayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(valueNgayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.valueNgayRowChangedEvent) Is Nothing) Then
                RaiseEvent valueNgayRowChanged(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.valueNgayRowChangingEvent) Is Nothing) Then
                RaiseEvent valueNgayRowChanging(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.valueNgayRowDeletedEvent) Is Nothing) Then
                RaiseEvent valueNgayRowDeleted(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.valueNgayRowDeletingEvent) Is Nothing) Then
                RaiseEvent valueNgayRowDeleting(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovevalueNgayRow(ByVal row As valueNgayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class valueNgayRow
        Inherits DataRow
        
        Private tablevalueNgay As valueNgayDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablevalueNgay = CType(Me.Table,valueNgayDataTable)
        End Sub
        
        Public Property TuNgay As String
            Get
                Try 
                    Return CType(Me(Me.tablevalueNgay.TuNgayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevalueNgay.TuNgayColumn) = value
            End Set
        End Property
        
        Public Property DenNgay As String
            Get
                Try 
                    Return CType(Me(Me.tablevalueNgay.DenNgayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevalueNgay.DenNgayColumn) = value
            End Set
        End Property
        
        Public Function IsTuNgayNull() As Boolean
            Return Me.IsNull(Me.tablevalueNgay.TuNgayColumn)
        End Function
        
        Public Sub SetTuNgayNull()
            Me(Me.tablevalueNgay.TuNgayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDenNgayNull() As Boolean
            Return Me.IsNull(Me.tablevalueNgay.DenNgayColumn)
        End Function
        
        Public Sub SetDenNgayNull()
            Me(Me.tablevalueNgay.DenNgayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class valueNgayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As valueNgayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As valueNgayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As valueNgayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryGNTNopThuDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNgayThuchi As DataColumn
        
        Private columnSoPhieuThuChi As DataColumn
        
        Private columnKyCuoc As DataColumn
        
        Private columnTienNop As DataColumn
        
        Private columnNhanVien As DataColumn
        
        Private columnSoTaiKhoan As DataColumn
        
        Private columnNgayNopThu As DataColumn
        
        Private columnSoGNT As DataColumn
        
        Private columnDichVu As DataColumn
        
        Private columnTienThu As DataColumn
        
        Friend Sub New()
            MyBase.New("QryGNTNopThu")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NgayThuchiColumn As DataColumn
            Get
                Return Me.columnNgayThuchi
            End Get
        End Property
        
        Friend ReadOnly Property SoPhieuThuChiColumn As DataColumn
            Get
                Return Me.columnSoPhieuThuChi
            End Get
        End Property
        
        Friend ReadOnly Property KyCuocColumn As DataColumn
            Get
                Return Me.columnKyCuoc
            End Get
        End Property
        
        Friend ReadOnly Property TienNopColumn As DataColumn
            Get
                Return Me.columnTienNop
            End Get
        End Property
        
        Friend ReadOnly Property NhanVienColumn As DataColumn
            Get
                Return Me.columnNhanVien
            End Get
        End Property
        
        Friend ReadOnly Property SoTaiKhoanColumn As DataColumn
            Get
                Return Me.columnSoTaiKhoan
            End Get
        End Property
        
        Friend ReadOnly Property NgayNopThuColumn As DataColumn
            Get
                Return Me.columnNgayNopThu
            End Get
        End Property
        
        Friend ReadOnly Property SoGNTColumn As DataColumn
            Get
                Return Me.columnSoGNT
            End Get
        End Property
        
        Friend ReadOnly Property DichVuColumn As DataColumn
            Get
                Return Me.columnDichVu
            End Get
        End Property
        
        Friend ReadOnly Property TienThuColumn As DataColumn
            Get
                Return Me.columnTienThu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QryGNTNopThuRow
            Get
                Return CType(Me.Rows(index),QryGNTNopThuRow)
            End Get
        End Property
        
        Public Event QryGNTNopThuRowChanged As QryGNTNopThuRowChangeEventHandler
        
        Public Event QryGNTNopThuRowChanging As QryGNTNopThuRowChangeEventHandler
        
        Public Event QryGNTNopThuRowDeleted As QryGNTNopThuRowChangeEventHandler
        
        Public Event QryGNTNopThuRowDeleting As QryGNTNopThuRowChangeEventHandler
        
        Public Overloads Sub AddQryGNTNopThuRow(ByVal row As QryGNTNopThuRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQryGNTNopThuRow(ByVal NgayThuchi As Date, ByVal SoPhieuThuChi As Short, ByVal KyCuoc As String, ByVal TienNop As Double, ByVal NhanVien As String, ByVal SoTaiKhoan As String, ByVal NgayNopThu As Date, ByVal SoGNT As Short, ByVal DichVu As String, ByVal TienThu As Double) As QryGNTNopThuRow
            Dim rowQryGNTNopThuRow As QryGNTNopThuRow = CType(Me.NewRow,QryGNTNopThuRow)
            rowQryGNTNopThuRow.ItemArray = New Object() {NgayThuchi, SoPhieuThuChi, KyCuoc, TienNop, NhanVien, SoTaiKhoan, NgayNopThu, SoGNT, DichVu, TienThu}
            Me.Rows.Add(rowQryGNTNopThuRow)
            Return rowQryGNTNopThuRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QryGNTNopThuDataTable = CType(MyBase.Clone,QryGNTNopThuDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QryGNTNopThuDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNgayThuchi = Me.Columns("NgayThuchi")
            Me.columnSoPhieuThuChi = Me.Columns("SoPhieuThuChi")
            Me.columnKyCuoc = Me.Columns("KyCuoc")
            Me.columnTienNop = Me.Columns("TienNop")
            Me.columnNhanVien = Me.Columns("NhanVien")
            Me.columnSoTaiKhoan = Me.Columns("SoTaiKhoan")
            Me.columnNgayNopThu = Me.Columns("NgayNopThu")
            Me.columnSoGNT = Me.Columns("SoGNT")
            Me.columnDichVu = Me.Columns("DichVu")
            Me.columnTienThu = Me.Columns("TienThu")
        End Sub
        
        Private Sub InitClass()
            Me.columnNgayThuchi = New DataColumn("NgayThuchi", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgayThuchi)
            Me.columnSoPhieuThuChi = New DataColumn("SoPhieuThuChi", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoPhieuThuChi)
            Me.columnKyCuoc = New DataColumn("KyCuoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKyCuoc)
            Me.columnTienNop = New DataColumn("TienNop", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTienNop)
            Me.columnNhanVien = New DataColumn("NhanVien", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNhanVien)
            Me.columnSoTaiKhoan = New DataColumn("SoTaiKhoan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoTaiKhoan)
            Me.columnNgayNopThu = New DataColumn("NgayNopThu", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgayNopThu)
            Me.columnSoGNT = New DataColumn("SoGNT", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoGNT)
            Me.columnDichVu = New DataColumn("DichVu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDichVu)
            Me.columnTienThu = New DataColumn("TienThu", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTienThu)
        End Sub
        
        Public Function NewQryGNTNopThuRow() As QryGNTNopThuRow
            Return CType(Me.NewRow,QryGNTNopThuRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QryGNTNopThuRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QryGNTNopThuRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QryGNTNopThuRowChangedEvent) Is Nothing) Then
                RaiseEvent QryGNTNopThuRowChanged(Me, New QryGNTNopThuRowChangeEvent(CType(e.Row,QryGNTNopThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QryGNTNopThuRowChangingEvent) Is Nothing) Then
                RaiseEvent QryGNTNopThuRowChanging(Me, New QryGNTNopThuRowChangeEvent(CType(e.Row,QryGNTNopThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QryGNTNopThuRowDeletedEvent) Is Nothing) Then
                RaiseEvent QryGNTNopThuRowDeleted(Me, New QryGNTNopThuRowChangeEvent(CType(e.Row,QryGNTNopThuRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QryGNTNopThuRowDeletingEvent) Is Nothing) Then
                RaiseEvent QryGNTNopThuRowDeleting(Me, New QryGNTNopThuRowChangeEvent(CType(e.Row,QryGNTNopThuRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQryGNTNopThuRow(ByVal row As QryGNTNopThuRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryGNTNopThuRow
        Inherits DataRow
        
        Private tableQryGNTNopThu As QryGNTNopThuDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQryGNTNopThu = CType(Me.Table,QryGNTNopThuDataTable)
        End Sub
        
        Public Property NgayThuchi As Date
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.NgayThuchiColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.NgayThuchiColumn) = value
            End Set
        End Property
        
        Public Property SoPhieuThuChi As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.SoPhieuThuChiColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.SoPhieuThuChiColumn) = value
            End Set
        End Property
        
        Public Property KyCuoc As String
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.KyCuocColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.KyCuocColumn) = value
            End Set
        End Property
        
        Public Property TienNop As Double
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.TienNopColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.TienNopColumn) = value
            End Set
        End Property
        
        Public Property NhanVien As String
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.NhanVienColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.NhanVienColumn) = value
            End Set
        End Property
        
        Public Property SoTaiKhoan As String
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.SoTaiKhoanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.SoTaiKhoanColumn) = value
            End Set
        End Property
        
        Public Property NgayNopThu As Date
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.NgayNopThuColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.NgayNopThuColumn) = value
            End Set
        End Property
        
        Public Property SoGNT As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.SoGNTColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.SoGNTColumn) = value
            End Set
        End Property
        
        Public Property DichVu As String
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.DichVuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.DichVuColumn) = value
            End Set
        End Property
        
        Public Property TienThu As Double
            Get
                Try 
                    Return CType(Me(Me.tableQryGNTNopThu.TienThuColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryGNTNopThu.TienThuColumn) = value
            End Set
        End Property
        
        Public Function IsNgayThuchiNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.NgayThuchiColumn)
        End Function
        
        Public Sub SetNgayThuchiNull()
            Me(Me.tableQryGNTNopThu.NgayThuchiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoPhieuThuChiNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.SoPhieuThuChiColumn)
        End Function
        
        Public Sub SetSoPhieuThuChiNull()
            Me(Me.tableQryGNTNopThu.SoPhieuThuChiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKyCuocNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.KyCuocColumn)
        End Function
        
        Public Sub SetKyCuocNull()
            Me(Me.tableQryGNTNopThu.KyCuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTienNopNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.TienNopColumn)
        End Function
        
        Public Sub SetTienNopNull()
            Me(Me.tableQryGNTNopThu.TienNopColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNhanVienNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.NhanVienColumn)
        End Function
        
        Public Sub SetNhanVienNull()
            Me(Me.tableQryGNTNopThu.NhanVienColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoTaiKhoanNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.SoTaiKhoanColumn)
        End Function
        
        Public Sub SetSoTaiKhoanNull()
            Me(Me.tableQryGNTNopThu.SoTaiKhoanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgayNopThuNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.NgayNopThuColumn)
        End Function
        
        Public Sub SetNgayNopThuNull()
            Me(Me.tableQryGNTNopThu.NgayNopThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoGNTNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.SoGNTColumn)
        End Function
        
        Public Sub SetSoGNTNull()
            Me(Me.tableQryGNTNopThu.SoGNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDichVuNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.DichVuColumn)
        End Function
        
        Public Sub SetDichVuNull()
            Me(Me.tableQryGNTNopThu.DichVuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTienThuNull() As Boolean
            Return Me.IsNull(Me.tableQryGNTNopThu.TienThuColumn)
        End Function
        
        Public Sub SetTienThuNull()
            Me(Me.tableQryGNTNopThu.TienThuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryGNTNopThuRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QryGNTNopThuRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QryGNTNopThuRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QryGNTNopThuRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCountryName As DataColumn
        
        Private columnStationName As DataColumn
        
        Friend Sub New()
            MyBase.New("qryCountry")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CountryNameColumn As DataColumn
            Get
                Return Me.columnCountryName
            End Get
        End Property
        
        Friend ReadOnly Property StationNameColumn As DataColumn
            Get
                Return Me.columnStationName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryCountryRow
            Get
                Return CType(Me.Rows(index),qryCountryRow)
            End Get
        End Property
        
        Public Event qryCountryRowChanged As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowChanging As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleted As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleting As qryCountryRowChangeEventHandler
        
        Public Overloads Sub AddqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryCountryRow(ByVal CountryName As String, ByVal StationName As String) As qryCountryRow
            Dim rowqryCountryRow As qryCountryRow = CType(Me.NewRow,qryCountryRow)
            rowqryCountryRow.ItemArray = New Object() {CountryName, StationName}
            Me.Rows.Add(rowqryCountryRow)
            Return rowqryCountryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryCountryDataTable = CType(MyBase.Clone,qryCountryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryCountryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCountryName = Me.Columns("CountryName")
            Me.columnStationName = Me.Columns("StationName")
        End Sub
        
        Private Sub InitClass()
            Me.columnCountryName = New DataColumn("CountryName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryName)
            Me.columnStationName = New DataColumn("StationName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStationName)
        End Sub
        
        Public Function NewqryCountryRow() As qryCountryRow
            Return CType(Me.NewRow,qryCountryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryCountryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryCountryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryCountryRowChangedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanged(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryCountryRowChangingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanging(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryCountryRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleted(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryCountryRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleting(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRow
        Inherits DataRow
        
        Private tableqryCountry As qryCountryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryCountry = CType(Me.Table,qryCountryDataTable)
        End Sub
        
        Public Property CountryName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.CountryNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.CountryNameColumn) = value
            End Set
        End Property
        
        Public Property StationName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.StationNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.StationNameColumn) = value
            End Set
        End Property
        
        Public Function IsCountryNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.CountryNameColumn)
        End Function
        
        Public Sub SetCountryNameNull()
            Me(Me.tableqryCountry.CountryNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStationNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.StationNameColumn)
        End Function
        
        Public Sub SetStationNameNull()
            Me(Me.tableqryCountry.StationNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryCountryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryCountryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryCountryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
