'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsGiayNopTien
    Inherits DataSet
    
    Private tableQueryReceipts As QueryReceiptsDataTable
    
    Private tableQueryEmployeeCodes As QueryEmployeeCodesDataTable
    
    Private tableGetCountry_station As GetCountry_stationDataTable
    
    Private tableGetValuePar As GetValueParDataTable
    
    Private tableGetCountry_station1 As GetCountry_station1DataTable
    
    Private relationQueryEmployeeCodesQueryReceipts As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("QueryReceipts")) Is Nothing) Then
                Me.Tables.Add(New QueryReceiptsDataTable(ds.Tables("QueryReceipts")))
            End If
            If (Not (ds.Tables("QueryEmployeeCodes")) Is Nothing) Then
                Me.Tables.Add(New QueryEmployeeCodesDataTable(ds.Tables("QueryEmployeeCodes")))
            End If
            If (Not (ds.Tables("GetCountry_station")) Is Nothing) Then
                Me.Tables.Add(New GetCountry_stationDataTable(ds.Tables("GetCountry_station")))
            End If
            If (Not (ds.Tables("GetValuePar")) Is Nothing) Then
                Me.Tables.Add(New GetValueParDataTable(ds.Tables("GetValuePar")))
            End If
            If (Not (ds.Tables("GetCountry_station1")) Is Nothing) Then
                Me.Tables.Add(New GetCountry_station1DataTable(ds.Tables("GetCountry_station1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QueryReceipts As QueryReceiptsDataTable
        Get
            Return Me.tableQueryReceipts
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QueryEmployeeCodes As QueryEmployeeCodesDataTable
        Get
            Return Me.tableQueryEmployeeCodes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GetCountry_station As GetCountry_stationDataTable
        Get
            Return Me.tableGetCountry_station
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GetValuePar As GetValueParDataTable
        Get
            Return Me.tableGetValuePar
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GetCountry_station1 As GetCountry_station1DataTable
        Get
            Return Me.tableGetCountry_station1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsGiayNopTien = CType(MyBase.Clone,DsGiayNopTien)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("QueryReceipts")) Is Nothing) Then
            Me.Tables.Add(New QueryReceiptsDataTable(ds.Tables("QueryReceipts")))
        End If
        If (Not (ds.Tables("QueryEmployeeCodes")) Is Nothing) Then
            Me.Tables.Add(New QueryEmployeeCodesDataTable(ds.Tables("QueryEmployeeCodes")))
        End If
        If (Not (ds.Tables("GetCountry_station")) Is Nothing) Then
            Me.Tables.Add(New GetCountry_stationDataTable(ds.Tables("GetCountry_station")))
        End If
        If (Not (ds.Tables("GetValuePar")) Is Nothing) Then
            Me.Tables.Add(New GetValueParDataTable(ds.Tables("GetValuePar")))
        End If
        If (Not (ds.Tables("GetCountry_station1")) Is Nothing) Then
            Me.Tables.Add(New GetCountry_station1DataTable(ds.Tables("GetCountry_station1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableQueryReceipts = CType(Me.Tables("QueryReceipts"),QueryReceiptsDataTable)
        If (Not (Me.tableQueryReceipts) Is Nothing) Then
            Me.tableQueryReceipts.InitVars
        End If
        Me.tableQueryEmployeeCodes = CType(Me.Tables("QueryEmployeeCodes"),QueryEmployeeCodesDataTable)
        If (Not (Me.tableQueryEmployeeCodes) Is Nothing) Then
            Me.tableQueryEmployeeCodes.InitVars
        End If
        Me.tableGetCountry_station = CType(Me.Tables("GetCountry_station"),GetCountry_stationDataTable)
        If (Not (Me.tableGetCountry_station) Is Nothing) Then
            Me.tableGetCountry_station.InitVars
        End If
        Me.tableGetValuePar = CType(Me.Tables("GetValuePar"),GetValueParDataTable)
        If (Not (Me.tableGetValuePar) Is Nothing) Then
            Me.tableGetValuePar.InitVars
        End If
        Me.tableGetCountry_station1 = CType(Me.Tables("GetCountry_station1"),GetCountry_station1DataTable)
        If (Not (Me.tableGetCountry_station1) Is Nothing) Then
            Me.tableGetCountry_station1.InitVars
        End If
        Me.relationQueryEmployeeCodesQueryReceipts = Me.Relations("QueryEmployeeCodesQueryReceipts")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsGiayNopTien"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsGiayNopTien.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableQueryReceipts = New QueryReceiptsDataTable
        Me.Tables.Add(Me.tableQueryReceipts)
        Me.tableQueryEmployeeCodes = New QueryEmployeeCodesDataTable
        Me.Tables.Add(Me.tableQueryEmployeeCodes)
        Me.tableGetCountry_station = New GetCountry_stationDataTable
        Me.Tables.Add(Me.tableGetCountry_station)
        Me.tableGetValuePar = New GetValueParDataTable
        Me.Tables.Add(Me.tableGetValuePar)
        Me.tableGetCountry_station1 = New GetCountry_station1DataTable
        Me.Tables.Add(Me.tableGetCountry_station1)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("QueryEmployeeCodesQueryReceipts", New DataColumn() {Me.tableQueryEmployeeCodes.Employ_CodeColumn}, New DataColumn() {Me.tableQueryReceipts.Employ_CodeColumn})
        Me.tableQueryReceipts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationQueryEmployeeCodesQueryReceipts = New DataRelation("QueryEmployeeCodesQueryReceipts", New DataColumn() {Me.tableQueryEmployeeCodes.Employ_CodeColumn}, New DataColumn() {Me.tableQueryReceipts.Employ_CodeColumn}, false)
        Me.Relations.Add(Me.relationQueryEmployeeCodesQueryReceipts)
    End Sub
    
    Private Function ShouldSerializeQueryReceipts() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQueryEmployeeCodes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGetCountry_station() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGetValuePar() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeGetCountry_station1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub QueryReceiptsRowChangeEventHandler(ByVal sender As Object, ByVal e As QueryReceiptsRowChangeEvent)
    
    Public Delegate Sub QueryEmployeeCodesRowChangeEventHandler(ByVal sender As Object, ByVal e As QueryEmployeeCodesRowChangeEvent)
    
    Public Delegate Sub GetCountry_stationRowChangeEventHandler(ByVal sender As Object, ByVal e As GetCountry_stationRowChangeEvent)
    
    Public Delegate Sub GetValueParRowChangeEventHandler(ByVal sender As Object, ByVal e As GetValueParRowChangeEvent)
    
    Public Delegate Sub GetCountry_station1RowChangeEventHandler(ByVal sender As Object, ByVal e As GetCountry_station1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryReceiptsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOrdinal_No As DataColumn
        
        Private columnList_Quantity As DataColumn
        
        Private columnInvoice_Quantity As DataColumn
        
        Private columnTotal_Money As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnFillName As DataColumn
        
        Friend Sub New()
            MyBase.New("QueryReceipts")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Ordinal_NoColumn As DataColumn
            Get
                Return Me.columnOrdinal_No
            End Get
        End Property
        
        Friend ReadOnly Property List_QuantityColumn As DataColumn
            Get
                Return Me.columnList_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityColumn As DataColumn
            Get
                Return Me.columnInvoice_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Total_MoneyColumn As DataColumn
            Get
                Return Me.columnTotal_Money
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property FillNameColumn As DataColumn
            Get
                Return Me.columnFillName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QueryReceiptsRow
            Get
                Return CType(Me.Rows(index),QueryReceiptsRow)
            End Get
        End Property
        
        Public Event QueryReceiptsRowChanged As QueryReceiptsRowChangeEventHandler
        
        Public Event QueryReceiptsRowChanging As QueryReceiptsRowChangeEventHandler
        
        Public Event QueryReceiptsRowDeleted As QueryReceiptsRowChangeEventHandler
        
        Public Event QueryReceiptsRowDeleting As QueryReceiptsRowChangeEventHandler
        
        Public Overloads Sub AddQueryReceiptsRow(ByVal row As QueryReceiptsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQueryReceiptsRow(ByVal Ordinal_No As Short, ByVal List_Quantity As Short, ByVal Invoice_Quantity As Short, ByVal Total_Money As Double, ByVal parentQueryEmployeeCodesRowByQueryEmployeeCodesQueryReceipts As QueryEmployeeCodesRow, ByVal FillName As String) As QueryReceiptsRow
            Dim rowQueryReceiptsRow As QueryReceiptsRow = CType(Me.NewRow,QueryReceiptsRow)
            rowQueryReceiptsRow.ItemArray = New Object() {Ordinal_No, List_Quantity, Invoice_Quantity, Total_Money, parentQueryEmployeeCodesRowByQueryEmployeeCodesQueryReceipts(0), FillName}
            Me.Rows.Add(rowQueryReceiptsRow)
            Return rowQueryReceiptsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QueryReceiptsDataTable = CType(MyBase.Clone,QueryReceiptsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QueryReceiptsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnOrdinal_No = Me.Columns("Ordinal_No")
            Me.columnList_Quantity = Me.Columns("List_Quantity")
            Me.columnInvoice_Quantity = Me.Columns("Invoice_Quantity")
            Me.columnTotal_Money = Me.Columns("Total_Money")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnFillName = Me.Columns("FillName")
        End Sub
        
        Private Sub InitClass()
            Me.columnOrdinal_No = New DataColumn("Ordinal_No", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinal_No)
            Me.columnList_Quantity = New DataColumn("List_Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_Quantity)
            Me.columnInvoice_Quantity = New DataColumn("Invoice_Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Quantity)
            Me.columnTotal_Money = New DataColumn("Total_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal_Money)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnFillName = New DataColumn("FillName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFillName)
        End Sub
        
        Public Function NewQueryReceiptsRow() As QueryReceiptsRow
            Return CType(Me.NewRow,QueryReceiptsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QueryReceiptsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QueryReceiptsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QueryReceiptsRowChangedEvent) Is Nothing) Then
                RaiseEvent QueryReceiptsRowChanged(Me, New QueryReceiptsRowChangeEvent(CType(e.Row,QueryReceiptsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QueryReceiptsRowChangingEvent) Is Nothing) Then
                RaiseEvent QueryReceiptsRowChanging(Me, New QueryReceiptsRowChangeEvent(CType(e.Row,QueryReceiptsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QueryReceiptsRowDeletedEvent) Is Nothing) Then
                RaiseEvent QueryReceiptsRowDeleted(Me, New QueryReceiptsRowChangeEvent(CType(e.Row,QueryReceiptsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QueryReceiptsRowDeletingEvent) Is Nothing) Then
                RaiseEvent QueryReceiptsRowDeleting(Me, New QueryReceiptsRowChangeEvent(CType(e.Row,QueryReceiptsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQueryReceiptsRow(ByVal row As QueryReceiptsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryReceiptsRow
        Inherits DataRow
        
        Private tableQueryReceipts As QueryReceiptsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQueryReceipts = CType(Me.Table,QueryReceiptsDataTable)
        End Sub
        
        Public Property Ordinal_No As Short
            Get
                Try 
                    Return CType(Me(Me.tableQueryReceipts.Ordinal_NoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReceipts.Ordinal_NoColumn) = value
            End Set
        End Property
        
        Public Property List_Quantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableQueryReceipts.List_QuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReceipts.List_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Invoice_Quantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableQueryReceipts.Invoice_QuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReceipts.Invoice_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Total_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableQueryReceipts.Total_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReceipts.Total_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQueryReceipts.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReceipts.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property FillName As String
            Get
                Try 
                    Return CType(Me(Me.tableQueryReceipts.FillNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReceipts.FillNameColumn) = value
            End Set
        End Property
        
        Public Property QueryEmployeeCodesRow As QueryEmployeeCodesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("QueryEmployeeCodesQueryReceipts")),QueryEmployeeCodesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("QueryEmployeeCodesQueryReceipts"))
            End Set
        End Property
        
        Public Function IsOrdinal_NoNull() As Boolean
            Return Me.IsNull(Me.tableQueryReceipts.Ordinal_NoColumn)
        End Function
        
        Public Sub SetOrdinal_NoNull()
            Me(Me.tableQueryReceipts.Ordinal_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableQueryReceipts.List_QuantityColumn)
        End Function
        
        Public Sub SetList_QuantityNull()
            Me(Me.tableQueryReceipts.List_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableQueryReceipts.Invoice_QuantityColumn)
        End Function
        
        Public Sub SetInvoice_QuantityNull()
            Me(Me.tableQueryReceipts.Invoice_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotal_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableQueryReceipts.Total_MoneyColumn)
        End Function
        
        Public Sub SetTotal_MoneyNull()
            Me(Me.tableQueryReceipts.Total_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQueryReceipts.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableQueryReceipts.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFillNameNull() As Boolean
            Return Me.IsNull(Me.tableQueryReceipts.FillNameColumn)
        End Function
        
        Public Sub SetFillNameNull()
            Me(Me.tableQueryReceipts.FillNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryReceiptsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QueryReceiptsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QueryReceiptsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QueryReceiptsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryEmployeeCodesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEmploy_Code As DataColumn
        
        Friend Sub New()
            MyBase.New("QueryEmployeeCodes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QueryEmployeeCodesRow
            Get
                Return CType(Me.Rows(index),QueryEmployeeCodesRow)
            End Get
        End Property
        
        Public Event QueryEmployeeCodesRowChanged As QueryEmployeeCodesRowChangeEventHandler
        
        Public Event QueryEmployeeCodesRowChanging As QueryEmployeeCodesRowChangeEventHandler
        
        Public Event QueryEmployeeCodesRowDeleted As QueryEmployeeCodesRowChangeEventHandler
        
        Public Event QueryEmployeeCodesRowDeleting As QueryEmployeeCodesRowChangeEventHandler
        
        Public Overloads Sub AddQueryEmployeeCodesRow(ByVal row As QueryEmployeeCodesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQueryEmployeeCodesRow(ByVal Employ_Code As String) As QueryEmployeeCodesRow
            Dim rowQueryEmployeeCodesRow As QueryEmployeeCodesRow = CType(Me.NewRow,QueryEmployeeCodesRow)
            rowQueryEmployeeCodesRow.ItemArray = New Object() {Employ_Code}
            Me.Rows.Add(rowQueryEmployeeCodesRow)
            Return rowQueryEmployeeCodesRow
        End Function
        
        Public Function FindByEmploy_Code(ByVal Employ_Code As String) As QueryEmployeeCodesRow
            Return CType(Me.Rows.Find(New Object() {Employ_Code}),QueryEmployeeCodesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QueryEmployeeCodesDataTable = CType(MyBase.Clone,QueryEmployeeCodesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QueryEmployeeCodesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
        End Sub
        
        Private Sub InitClass()
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.Constraints.Add(New UniqueConstraint("DsGiayNopTienKey1", New DataColumn() {Me.columnEmploy_Code}, true))
            Me.columnEmploy_Code.AllowDBNull = false
            Me.columnEmploy_Code.Unique = true
        End Sub
        
        Public Function NewQueryEmployeeCodesRow() As QueryEmployeeCodesRow
            Return CType(Me.NewRow,QueryEmployeeCodesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QueryEmployeeCodesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QueryEmployeeCodesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QueryEmployeeCodesRowChangedEvent) Is Nothing) Then
                RaiseEvent QueryEmployeeCodesRowChanged(Me, New QueryEmployeeCodesRowChangeEvent(CType(e.Row,QueryEmployeeCodesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QueryEmployeeCodesRowChangingEvent) Is Nothing) Then
                RaiseEvent QueryEmployeeCodesRowChanging(Me, New QueryEmployeeCodesRowChangeEvent(CType(e.Row,QueryEmployeeCodesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QueryEmployeeCodesRowDeletedEvent) Is Nothing) Then
                RaiseEvent QueryEmployeeCodesRowDeleted(Me, New QueryEmployeeCodesRowChangeEvent(CType(e.Row,QueryEmployeeCodesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QueryEmployeeCodesRowDeletingEvent) Is Nothing) Then
                RaiseEvent QueryEmployeeCodesRowDeleting(Me, New QueryEmployeeCodesRowChangeEvent(CType(e.Row,QueryEmployeeCodesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQueryEmployeeCodesRow(ByVal row As QueryEmployeeCodesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryEmployeeCodesRow
        Inherits DataRow
        
        Private tableQueryEmployeeCodes As QueryEmployeeCodesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQueryEmployeeCodes = CType(Me.Table,QueryEmployeeCodesDataTable)
        End Sub
        
        Public Property Employ_Code As String
            Get
                Return CType(Me(Me.tableQueryEmployeeCodes.Employ_CodeColumn),String)
            End Get
            Set
                Me(Me.tableQueryEmployeeCodes.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Function GetQueryReceiptsRows() As QueryReceiptsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("QueryEmployeeCodesQueryReceipts")),QueryReceiptsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryEmployeeCodesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QueryEmployeeCodesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QueryEmployeeCodesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QueryEmployeeCodesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetCountry_stationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCountryName As DataColumn
        
        Private columnStation_Name As DataColumn
        
        Friend Sub New()
            MyBase.New("GetCountry_station")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CountryNameColumn As DataColumn
            Get
                Return Me.columnCountryName
            End Get
        End Property
        
        Friend ReadOnly Property Station_NameColumn As DataColumn
            Get
                Return Me.columnStation_Name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GetCountry_stationRow
            Get
                Return CType(Me.Rows(index),GetCountry_stationRow)
            End Get
        End Property
        
        Public Event GetCountry_stationRowChanged As GetCountry_stationRowChangeEventHandler
        
        Public Event GetCountry_stationRowChanging As GetCountry_stationRowChangeEventHandler
        
        Public Event GetCountry_stationRowDeleted As GetCountry_stationRowChangeEventHandler
        
        Public Event GetCountry_stationRowDeleting As GetCountry_stationRowChangeEventHandler
        
        Public Overloads Sub AddGetCountry_stationRow(ByVal row As GetCountry_stationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGetCountry_stationRow(ByVal CountryName As String, ByVal Station_Name As String) As GetCountry_stationRow
            Dim rowGetCountry_stationRow As GetCountry_stationRow = CType(Me.NewRow,GetCountry_stationRow)
            rowGetCountry_stationRow.ItemArray = New Object() {CountryName, Station_Name}
            Me.Rows.Add(rowGetCountry_stationRow)
            Return rowGetCountry_stationRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GetCountry_stationDataTable = CType(MyBase.Clone,GetCountry_stationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GetCountry_stationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCountryName = Me.Columns("CountryName")
            Me.columnStation_Name = Me.Columns("Station_Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnCountryName = New DataColumn("CountryName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryName)
            Me.columnStation_Name = New DataColumn("Station_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStation_Name)
        End Sub
        
        Public Function NewGetCountry_stationRow() As GetCountry_stationRow
            Return CType(Me.NewRow,GetCountry_stationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GetCountry_stationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GetCountry_stationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GetCountry_stationRowChangedEvent) Is Nothing) Then
                RaiseEvent GetCountry_stationRowChanged(Me, New GetCountry_stationRowChangeEvent(CType(e.Row,GetCountry_stationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GetCountry_stationRowChangingEvent) Is Nothing) Then
                RaiseEvent GetCountry_stationRowChanging(Me, New GetCountry_stationRowChangeEvent(CType(e.Row,GetCountry_stationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GetCountry_stationRowDeletedEvent) Is Nothing) Then
                RaiseEvent GetCountry_stationRowDeleted(Me, New GetCountry_stationRowChangeEvent(CType(e.Row,GetCountry_stationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GetCountry_stationRowDeletingEvent) Is Nothing) Then
                RaiseEvent GetCountry_stationRowDeleting(Me, New GetCountry_stationRowChangeEvent(CType(e.Row,GetCountry_stationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGetCountry_stationRow(ByVal row As GetCountry_stationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetCountry_stationRow
        Inherits DataRow
        
        Private tableGetCountry_station As GetCountry_stationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGetCountry_station = CType(Me.Table,GetCountry_stationDataTable)
        End Sub
        
        Public Property CountryName As String
            Get
                Try 
                    Return CType(Me(Me.tableGetCountry_station.CountryNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetCountry_station.CountryNameColumn) = value
            End Set
        End Property
        
        Public Property Station_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableGetCountry_station.Station_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetCountry_station.Station_NameColumn) = value
            End Set
        End Property
        
        Public Function IsCountryNameNull() As Boolean
            Return Me.IsNull(Me.tableGetCountry_station.CountryNameColumn)
        End Function
        
        Public Sub SetCountryNameNull()
            Me(Me.tableGetCountry_station.CountryNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStation_NameNull() As Boolean
            Return Me.IsNull(Me.tableGetCountry_station.Station_NameColumn)
        End Function
        
        Public Sub SetStation_NameNull()
            Me(Me.tableGetCountry_station.Station_NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetCountry_stationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GetCountry_stationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GetCountry_stationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GetCountry_stationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetValueParDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSBKNT As DataColumn
        
        Private columnChuKy As DataColumn
        
        Private columnNgay As DataColumn
        
        Private columnDichVu As DataColumn
        
        Private columnMaNguoiNop As DataColumn
        
        Private columnTenNguoiNop As DataColumn
        
        Friend Sub New()
            MyBase.New("GetValuePar")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SBKNTColumn As DataColumn
            Get
                Return Me.columnSBKNT
            End Get
        End Property
        
        Friend ReadOnly Property ChuKyColumn As DataColumn
            Get
                Return Me.columnChuKy
            End Get
        End Property
        
        Friend ReadOnly Property NgayColumn As DataColumn
            Get
                Return Me.columnNgay
            End Get
        End Property
        
        Friend ReadOnly Property DichVuColumn As DataColumn
            Get
                Return Me.columnDichVu
            End Get
        End Property
        
        Friend ReadOnly Property MaNguoiNopColumn As DataColumn
            Get
                Return Me.columnMaNguoiNop
            End Get
        End Property
        
        Friend ReadOnly Property TenNguoiNopColumn As DataColumn
            Get
                Return Me.columnTenNguoiNop
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GetValueParRow
            Get
                Return CType(Me.Rows(index),GetValueParRow)
            End Get
        End Property
        
        Public Event GetValueParRowChanged As GetValueParRowChangeEventHandler
        
        Public Event GetValueParRowChanging As GetValueParRowChangeEventHandler
        
        Public Event GetValueParRowDeleted As GetValueParRowChangeEventHandler
        
        Public Event GetValueParRowDeleting As GetValueParRowChangeEventHandler
        
        Public Overloads Sub AddGetValueParRow(ByVal row As GetValueParRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGetValueParRow(ByVal SBKNT As Integer, ByVal ChuKy As String, ByVal Ngay As Date, ByVal DichVu As String, ByVal MaNguoiNop As String, ByVal TenNguoiNop As String) As GetValueParRow
            Dim rowGetValueParRow As GetValueParRow = CType(Me.NewRow,GetValueParRow)
            rowGetValueParRow.ItemArray = New Object() {SBKNT, ChuKy, Ngay, DichVu, MaNguoiNop, TenNguoiNop}
            Me.Rows.Add(rowGetValueParRow)
            Return rowGetValueParRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GetValueParDataTable = CType(MyBase.Clone,GetValueParDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GetValueParDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSBKNT = Me.Columns("SBKNT")
            Me.columnChuKy = Me.Columns("ChuKy")
            Me.columnNgay = Me.Columns("Ngay")
            Me.columnDichVu = Me.Columns("DichVu")
            Me.columnMaNguoiNop = Me.Columns("MaNguoiNop")
            Me.columnTenNguoiNop = Me.Columns("TenNguoiNop")
        End Sub
        
        Private Sub InitClass()
            Me.columnSBKNT = New DataColumn("SBKNT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBKNT)
            Me.columnChuKy = New DataColumn("ChuKy", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChuKy)
            Me.columnNgay = New DataColumn("Ngay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgay)
            Me.columnDichVu = New DataColumn("DichVu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDichVu)
            Me.columnMaNguoiNop = New DataColumn("MaNguoiNop", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaNguoiNop)
            Me.columnTenNguoiNop = New DataColumn("TenNguoiNop", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenNguoiNop)
        End Sub
        
        Public Function NewGetValueParRow() As GetValueParRow
            Return CType(Me.NewRow,GetValueParRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GetValueParRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GetValueParRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GetValueParRowChangedEvent) Is Nothing) Then
                RaiseEvent GetValueParRowChanged(Me, New GetValueParRowChangeEvent(CType(e.Row,GetValueParRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GetValueParRowChangingEvent) Is Nothing) Then
                RaiseEvent GetValueParRowChanging(Me, New GetValueParRowChangeEvent(CType(e.Row,GetValueParRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GetValueParRowDeletedEvent) Is Nothing) Then
                RaiseEvent GetValueParRowDeleted(Me, New GetValueParRowChangeEvent(CType(e.Row,GetValueParRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GetValueParRowDeletingEvent) Is Nothing) Then
                RaiseEvent GetValueParRowDeleting(Me, New GetValueParRowChangeEvent(CType(e.Row,GetValueParRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGetValueParRow(ByVal row As GetValueParRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetValueParRow
        Inherits DataRow
        
        Private tableGetValuePar As GetValueParDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGetValuePar = CType(Me.Table,GetValueParDataTable)
        End Sub
        
        Public Property SBKNT As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGetValuePar.SBKNTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetValuePar.SBKNTColumn) = value
            End Set
        End Property
        
        Public Property ChuKy As String
            Get
                Try 
                    Return CType(Me(Me.tableGetValuePar.ChuKyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetValuePar.ChuKyColumn) = value
            End Set
        End Property
        
        Public Property Ngay As Date
            Get
                Try 
                    Return CType(Me(Me.tableGetValuePar.NgayColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetValuePar.NgayColumn) = value
            End Set
        End Property
        
        Public Property DichVu As String
            Get
                Try 
                    Return CType(Me(Me.tableGetValuePar.DichVuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetValuePar.DichVuColumn) = value
            End Set
        End Property
        
        Public Property MaNguoiNop As String
            Get
                Try 
                    Return CType(Me(Me.tableGetValuePar.MaNguoiNopColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetValuePar.MaNguoiNopColumn) = value
            End Set
        End Property
        
        Public Property TenNguoiNop As String
            Get
                Try 
                    Return CType(Me(Me.tableGetValuePar.TenNguoiNopColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetValuePar.TenNguoiNopColumn) = value
            End Set
        End Property
        
        Public Function IsSBKNTNull() As Boolean
            Return Me.IsNull(Me.tableGetValuePar.SBKNTColumn)
        End Function
        
        Public Sub SetSBKNTNull()
            Me(Me.tableGetValuePar.SBKNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChuKyNull() As Boolean
            Return Me.IsNull(Me.tableGetValuePar.ChuKyColumn)
        End Function
        
        Public Sub SetChuKyNull()
            Me(Me.tableGetValuePar.ChuKyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgayNull() As Boolean
            Return Me.IsNull(Me.tableGetValuePar.NgayColumn)
        End Function
        
        Public Sub SetNgayNull()
            Me(Me.tableGetValuePar.NgayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDichVuNull() As Boolean
            Return Me.IsNull(Me.tableGetValuePar.DichVuColumn)
        End Function
        
        Public Sub SetDichVuNull()
            Me(Me.tableGetValuePar.DichVuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaNguoiNopNull() As Boolean
            Return Me.IsNull(Me.tableGetValuePar.MaNguoiNopColumn)
        End Function
        
        Public Sub SetMaNguoiNopNull()
            Me(Me.tableGetValuePar.MaNguoiNopColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTenNguoiNopNull() As Boolean
            Return Me.IsNull(Me.tableGetValuePar.TenNguoiNopColumn)
        End Function
        
        Public Sub SetTenNguoiNopNull()
            Me(Me.tableGetValuePar.TenNguoiNopColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetValueParRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GetValueParRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GetValueParRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GetValueParRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetCountry_station1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCountryName As DataColumn
        
        Private columnStation_Name As DataColumn
        
        Friend Sub New()
            MyBase.New("GetCountry_station1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CountryNameColumn As DataColumn
            Get
                Return Me.columnCountryName
            End Get
        End Property
        
        Friend ReadOnly Property Station_NameColumn As DataColumn
            Get
                Return Me.columnStation_Name
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GetCountry_station1Row
            Get
                Return CType(Me.Rows(index),GetCountry_station1Row)
            End Get
        End Property
        
        Public Event GetCountry_station1RowChanged As GetCountry_station1RowChangeEventHandler
        
        Public Event GetCountry_station1RowChanging As GetCountry_station1RowChangeEventHandler
        
        Public Event GetCountry_station1RowDeleted As GetCountry_station1RowChangeEventHandler
        
        Public Event GetCountry_station1RowDeleting As GetCountry_station1RowChangeEventHandler
        
        Public Overloads Sub AddGetCountry_station1Row(ByVal row As GetCountry_station1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGetCountry_station1Row(ByVal CountryName As String, ByVal Station_Name As String) As GetCountry_station1Row
            Dim rowGetCountry_station1Row As GetCountry_station1Row = CType(Me.NewRow,GetCountry_station1Row)
            rowGetCountry_station1Row.ItemArray = New Object() {CountryName, Station_Name}
            Me.Rows.Add(rowGetCountry_station1Row)
            Return rowGetCountry_station1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GetCountry_station1DataTable = CType(MyBase.Clone,GetCountry_station1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GetCountry_station1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCountryName = Me.Columns("CountryName")
            Me.columnStation_Name = Me.Columns("Station_Name")
        End Sub
        
        Private Sub InitClass()
            Me.columnCountryName = New DataColumn("CountryName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryName)
            Me.columnStation_Name = New DataColumn("Station_Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStation_Name)
        End Sub
        
        Public Function NewGetCountry_station1Row() As GetCountry_station1Row
            Return CType(Me.NewRow,GetCountry_station1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GetCountry_station1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GetCountry_station1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GetCountry_station1RowChangedEvent) Is Nothing) Then
                RaiseEvent GetCountry_station1RowChanged(Me, New GetCountry_station1RowChangeEvent(CType(e.Row,GetCountry_station1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GetCountry_station1RowChangingEvent) Is Nothing) Then
                RaiseEvent GetCountry_station1RowChanging(Me, New GetCountry_station1RowChangeEvent(CType(e.Row,GetCountry_station1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GetCountry_station1RowDeletedEvent) Is Nothing) Then
                RaiseEvent GetCountry_station1RowDeleted(Me, New GetCountry_station1RowChangeEvent(CType(e.Row,GetCountry_station1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GetCountry_station1RowDeletingEvent) Is Nothing) Then
                RaiseEvent GetCountry_station1RowDeleting(Me, New GetCountry_station1RowChangeEvent(CType(e.Row,GetCountry_station1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGetCountry_station1Row(ByVal row As GetCountry_station1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetCountry_station1Row
        Inherits DataRow
        
        Private tableGetCountry_station1 As GetCountry_station1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGetCountry_station1 = CType(Me.Table,GetCountry_station1DataTable)
        End Sub
        
        Public Property CountryName As String
            Get
                Try 
                    Return CType(Me(Me.tableGetCountry_station1.CountryNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetCountry_station1.CountryNameColumn) = value
            End Set
        End Property
        
        Public Property Station_Name As String
            Get
                Try 
                    Return CType(Me(Me.tableGetCountry_station1.Station_NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetCountry_station1.Station_NameColumn) = value
            End Set
        End Property
        
        Public Function IsCountryNameNull() As Boolean
            Return Me.IsNull(Me.tableGetCountry_station1.CountryNameColumn)
        End Function
        
        Public Sub SetCountryNameNull()
            Me(Me.tableGetCountry_station1.CountryNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStation_NameNull() As Boolean
            Return Me.IsNull(Me.tableGetCountry_station1.Station_NameColumn)
        End Function
        
        Public Sub SetStation_NameNull()
            Me(Me.tableGetCountry_station1.Station_NameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetCountry_station1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GetCountry_station1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GetCountry_station1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GetCountry_station1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
