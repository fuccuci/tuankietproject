'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsSoQuy
    Inherits DataSet
    
    Private tableQueryReport_SoQuy As QueryReport_SoQuyDataTable
    
    Private tableQueryTonDauKy As QueryTonDauKyDataTable
    
    Private tableQueryTonCuoiKy As QueryTonCuoiKyDataTable
    
    Private tableNgayBaoCao As NgayBaoCaoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("QueryReport_SoQuy")) Is Nothing) Then
                Me.Tables.Add(New QueryReport_SoQuyDataTable(ds.Tables("QueryReport_SoQuy")))
            End If
            If (Not (ds.Tables("QueryTonDauKy")) Is Nothing) Then
                Me.Tables.Add(New QueryTonDauKyDataTable(ds.Tables("QueryTonDauKy")))
            End If
            If (Not (ds.Tables("QueryTonCuoiKy")) Is Nothing) Then
                Me.Tables.Add(New QueryTonCuoiKyDataTable(ds.Tables("QueryTonCuoiKy")))
            End If
            If (Not (ds.Tables("NgayBaoCao")) Is Nothing) Then
                Me.Tables.Add(New NgayBaoCaoDataTable(ds.Tables("NgayBaoCao")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QueryReport_SoQuy As QueryReport_SoQuyDataTable
        Get
            Return Me.tableQueryReport_SoQuy
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QueryTonDauKy As QueryTonDauKyDataTable
        Get
            Return Me.tableQueryTonDauKy
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QueryTonCuoiKy As QueryTonCuoiKyDataTable
        Get
            Return Me.tableQueryTonCuoiKy
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NgayBaoCao As NgayBaoCaoDataTable
        Get
            Return Me.tableNgayBaoCao
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsSoQuy = CType(MyBase.Clone,DsSoQuy)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("QueryReport_SoQuy")) Is Nothing) Then
            Me.Tables.Add(New QueryReport_SoQuyDataTable(ds.Tables("QueryReport_SoQuy")))
        End If
        If (Not (ds.Tables("QueryTonDauKy")) Is Nothing) Then
            Me.Tables.Add(New QueryTonDauKyDataTable(ds.Tables("QueryTonDauKy")))
        End If
        If (Not (ds.Tables("QueryTonCuoiKy")) Is Nothing) Then
            Me.Tables.Add(New QueryTonCuoiKyDataTable(ds.Tables("QueryTonCuoiKy")))
        End If
        If (Not (ds.Tables("NgayBaoCao")) Is Nothing) Then
            Me.Tables.Add(New NgayBaoCaoDataTable(ds.Tables("NgayBaoCao")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableQueryReport_SoQuy = CType(Me.Tables("QueryReport_SoQuy"),QueryReport_SoQuyDataTable)
        If (Not (Me.tableQueryReport_SoQuy) Is Nothing) Then
            Me.tableQueryReport_SoQuy.InitVars
        End If
        Me.tableQueryTonDauKy = CType(Me.Tables("QueryTonDauKy"),QueryTonDauKyDataTable)
        If (Not (Me.tableQueryTonDauKy) Is Nothing) Then
            Me.tableQueryTonDauKy.InitVars
        End If
        Me.tableQueryTonCuoiKy = CType(Me.Tables("QueryTonCuoiKy"),QueryTonCuoiKyDataTable)
        If (Not (Me.tableQueryTonCuoiKy) Is Nothing) Then
            Me.tableQueryTonCuoiKy.InitVars
        End If
        Me.tableNgayBaoCao = CType(Me.Tables("NgayBaoCao"),NgayBaoCaoDataTable)
        If (Not (Me.tableNgayBaoCao) Is Nothing) Then
            Me.tableNgayBaoCao.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsSoQuy"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsSoQuy.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableQueryReport_SoQuy = New QueryReport_SoQuyDataTable
        Me.Tables.Add(Me.tableQueryReport_SoQuy)
        Me.tableQueryTonDauKy = New QueryTonDauKyDataTable
        Me.Tables.Add(Me.tableQueryTonDauKy)
        Me.tableQueryTonCuoiKy = New QueryTonCuoiKyDataTable
        Me.Tables.Add(Me.tableQueryTonCuoiKy)
        Me.tableNgayBaoCao = New NgayBaoCaoDataTable
        Me.Tables.Add(Me.tableNgayBaoCao)
    End Sub
    
    Private Function ShouldSerializeQueryReport_SoQuy() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQueryTonDauKy() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQueryTonCuoiKy() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNgayBaoCao() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub QueryReport_SoQuyRowChangeEventHandler(ByVal sender As Object, ByVal e As QueryReport_SoQuyRowChangeEvent)
    
    Public Delegate Sub QueryTonDauKyRowChangeEventHandler(ByVal sender As Object, ByVal e As QueryTonDauKyRowChangeEvent)
    
    Public Delegate Sub QueryTonCuoiKyRowChangeEventHandler(ByVal sender As Object, ByVal e As QueryTonCuoiKyRowChangeEvent)
    
    Public Delegate Sub NgayBaoCaoRowChangeEventHandler(ByVal sender As Object, ByVal e As NgayBaoCaoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryReport_SoQuyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnRecei_Expen_Date As DataColumn
        
        Private columnRecei_No As DataColumn
        
        Private columnExpen_No As DataColumn
        
        Private columnDescriptions As DataColumn
        
        Private columnRecei_Money As DataColumn
        
        Private columnExpen_Money As DataColumn
        
        Private columnTonQuy As DataColumn
        
        Friend Sub New()
            MyBase.New("QueryReport_SoQuy")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property Recei_Expen_DateColumn As DataColumn
            Get
                Return Me.columnRecei_Expen_Date
            End Get
        End Property
        
        Friend ReadOnly Property Recei_NoColumn As DataColumn
            Get
                Return Me.columnRecei_No
            End Get
        End Property
        
        Friend ReadOnly Property Expen_NoColumn As DataColumn
            Get
                Return Me.columnExpen_No
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionsColumn As DataColumn
            Get
                Return Me.columnDescriptions
            End Get
        End Property
        
        Friend ReadOnly Property Recei_MoneyColumn As DataColumn
            Get
                Return Me.columnRecei_Money
            End Get
        End Property
        
        Friend ReadOnly Property Expen_MoneyColumn As DataColumn
            Get
                Return Me.columnExpen_Money
            End Get
        End Property
        
        Friend ReadOnly Property TonQuyColumn As DataColumn
            Get
                Return Me.columnTonQuy
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QueryReport_SoQuyRow
            Get
                Return CType(Me.Rows(index),QueryReport_SoQuyRow)
            End Get
        End Property
        
        Public Event QueryReport_SoQuyRowChanged As QueryReport_SoQuyRowChangeEventHandler
        
        Public Event QueryReport_SoQuyRowChanging As QueryReport_SoQuyRowChangeEventHandler
        
        Public Event QueryReport_SoQuyRowDeleted As QueryReport_SoQuyRowChangeEventHandler
        
        Public Event QueryReport_SoQuyRowDeleting As QueryReport_SoQuyRowChangeEventHandler
        
        Public Overloads Sub AddQueryReport_SoQuyRow(ByVal row As QueryReport_SoQuyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQueryReport_SoQuyRow(ByVal Recei_Expen_Date As Date, ByVal Recei_No As Short, ByVal Expen_No As Short, ByVal Descriptions As String, ByVal Recei_Money As Double, ByVal Expen_Money As Double, ByVal TonQuy As Double) As QueryReport_SoQuyRow
            Dim rowQueryReport_SoQuyRow As QueryReport_SoQuyRow = CType(Me.NewRow,QueryReport_SoQuyRow)
            rowQueryReport_SoQuyRow.ItemArray = New Object() {Nothing, Recei_Expen_Date, Recei_No, Expen_No, Descriptions, Recei_Money, Expen_Money, TonQuy}
            Me.Rows.Add(rowQueryReport_SoQuyRow)
            Return rowQueryReport_SoQuyRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As QueryReport_SoQuyRow
            Return CType(Me.Rows.Find(New Object() {ID}),QueryReport_SoQuyRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QueryReport_SoQuyDataTable = CType(MyBase.Clone,QueryReport_SoQuyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QueryReport_SoQuyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnRecei_Expen_Date = Me.Columns("Recei_Expen_Date")
            Me.columnRecei_No = Me.Columns("Recei_No")
            Me.columnExpen_No = Me.Columns("Expen_No")
            Me.columnDescriptions = Me.Columns("Descriptions")
            Me.columnRecei_Money = Me.Columns("Recei_Money")
            Me.columnExpen_Money = Me.Columns("Expen_Money")
            Me.columnTonQuy = Me.Columns("TonQuy")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnRecei_Expen_Date = New DataColumn("Recei_Expen_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Expen_Date)
            Me.columnRecei_No = New DataColumn("Recei_No", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_No)
            Me.columnExpen_No = New DataColumn("Expen_No", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpen_No)
            Me.columnDescriptions = New DataColumn("Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptions)
            Me.columnRecei_Money = New DataColumn("Recei_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Money)
            Me.columnExpen_Money = New DataColumn("Expen_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpen_Money)
            Me.columnTonQuy = New DataColumn("TonQuy", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTonQuy)
            Me.Constraints.Add(New UniqueConstraint("DsSoQuyKey2", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnTonQuy.ReadOnly = true
        End Sub
        
        Public Function NewQueryReport_SoQuyRow() As QueryReport_SoQuyRow
            Return CType(Me.NewRow,QueryReport_SoQuyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QueryReport_SoQuyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QueryReport_SoQuyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QueryReport_SoQuyRowChangedEvent) Is Nothing) Then
                RaiseEvent QueryReport_SoQuyRowChanged(Me, New QueryReport_SoQuyRowChangeEvent(CType(e.Row,QueryReport_SoQuyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QueryReport_SoQuyRowChangingEvent) Is Nothing) Then
                RaiseEvent QueryReport_SoQuyRowChanging(Me, New QueryReport_SoQuyRowChangeEvent(CType(e.Row,QueryReport_SoQuyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QueryReport_SoQuyRowDeletedEvent) Is Nothing) Then
                RaiseEvent QueryReport_SoQuyRowDeleted(Me, New QueryReport_SoQuyRowChangeEvent(CType(e.Row,QueryReport_SoQuyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QueryReport_SoQuyRowDeletingEvent) Is Nothing) Then
                RaiseEvent QueryReport_SoQuyRowDeleting(Me, New QueryReport_SoQuyRowChangeEvent(CType(e.Row,QueryReport_SoQuyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQueryReport_SoQuyRow(ByVal row As QueryReport_SoQuyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryReport_SoQuyRow
        Inherits DataRow
        
        Private tableQueryReport_SoQuy As QueryReport_SoQuyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQueryReport_SoQuy = CType(Me.Table,QueryReport_SoQuyDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableQueryReport_SoQuy.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.IDColumn) = value
            End Set
        End Property
        
        Public Property Recei_Expen_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableQueryReport_SoQuy.Recei_Expen_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.Recei_Expen_DateColumn) = value
            End Set
        End Property
        
        Public Property Recei_No As Short
            Get
                Try 
                    Return CType(Me(Me.tableQueryReport_SoQuy.Recei_NoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.Recei_NoColumn) = value
            End Set
        End Property
        
        Public Property Expen_No As Short
            Get
                Try 
                    Return CType(Me(Me.tableQueryReport_SoQuy.Expen_NoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.Expen_NoColumn) = value
            End Set
        End Property
        
        Public Property Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableQueryReport_SoQuy.DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property Recei_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableQueryReport_SoQuy.Recei_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.Recei_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Expen_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableQueryReport_SoQuy.Expen_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.Expen_MoneyColumn) = value
            End Set
        End Property
        
        Public Property TonQuy As Double
            Get
                Try 
                    Return CType(Me(Me.tableQueryReport_SoQuy.TonQuyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryReport_SoQuy.TonQuyColumn) = value
            End Set
        End Property
        
        Public Function IsRecei_Expen_DateNull() As Boolean
            Return Me.IsNull(Me.tableQueryReport_SoQuy.Recei_Expen_DateColumn)
        End Function
        
        Public Sub SetRecei_Expen_DateNull()
            Me(Me.tableQueryReport_SoQuy.Recei_Expen_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_NoNull() As Boolean
            Return Me.IsNull(Me.tableQueryReport_SoQuy.Recei_NoColumn)
        End Function
        
        Public Sub SetRecei_NoNull()
            Me(Me.tableQueryReport_SoQuy.Recei_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpen_NoNull() As Boolean
            Return Me.IsNull(Me.tableQueryReport_SoQuy.Expen_NoColumn)
        End Function
        
        Public Sub SetExpen_NoNull()
            Me(Me.tableQueryReport_SoQuy.Expen_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableQueryReport_SoQuy.DescriptionsColumn)
        End Function
        
        Public Sub SetDescriptionsNull()
            Me(Me.tableQueryReport_SoQuy.DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableQueryReport_SoQuy.Recei_MoneyColumn)
        End Function
        
        Public Sub SetRecei_MoneyNull()
            Me(Me.tableQueryReport_SoQuy.Recei_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpen_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableQueryReport_SoQuy.Expen_MoneyColumn)
        End Function
        
        Public Sub SetExpen_MoneyNull()
            Me(Me.tableQueryReport_SoQuy.Expen_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTonQuyNull() As Boolean
            Return Me.IsNull(Me.tableQueryReport_SoQuy.TonQuyColumn)
        End Function
        
        Public Sub SetTonQuyNull()
            Me(Me.tableQueryReport_SoQuy.TonQuyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryReport_SoQuyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QueryReport_SoQuyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QueryReport_SoQuyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QueryReport_SoQuyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryTonDauKyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDauKy As DataColumn
        
        Friend Sub New()
            MyBase.New("QueryTonDauKy")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DauKyColumn As DataColumn
            Get
                Return Me.columnDauKy
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QueryTonDauKyRow
            Get
                Return CType(Me.Rows(index),QueryTonDauKyRow)
            End Get
        End Property
        
        Public Event QueryTonDauKyRowChanged As QueryTonDauKyRowChangeEventHandler
        
        Public Event QueryTonDauKyRowChanging As QueryTonDauKyRowChangeEventHandler
        
        Public Event QueryTonDauKyRowDeleted As QueryTonDauKyRowChangeEventHandler
        
        Public Event QueryTonDauKyRowDeleting As QueryTonDauKyRowChangeEventHandler
        
        Public Overloads Sub AddQueryTonDauKyRow(ByVal row As QueryTonDauKyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQueryTonDauKyRow(ByVal DauKy As Double) As QueryTonDauKyRow
            Dim rowQueryTonDauKyRow As QueryTonDauKyRow = CType(Me.NewRow,QueryTonDauKyRow)
            rowQueryTonDauKyRow.ItemArray = New Object() {DauKy}
            Me.Rows.Add(rowQueryTonDauKyRow)
            Return rowQueryTonDauKyRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QueryTonDauKyDataTable = CType(MyBase.Clone,QueryTonDauKyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QueryTonDauKyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDauKy = Me.Columns("DauKy")
        End Sub
        
        Private Sub InitClass()
            Me.columnDauKy = New DataColumn("DauKy", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDauKy)
            Me.columnDauKy.ReadOnly = true
        End Sub
        
        Public Function NewQueryTonDauKyRow() As QueryTonDauKyRow
            Return CType(Me.NewRow,QueryTonDauKyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QueryTonDauKyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QueryTonDauKyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QueryTonDauKyRowChangedEvent) Is Nothing) Then
                RaiseEvent QueryTonDauKyRowChanged(Me, New QueryTonDauKyRowChangeEvent(CType(e.Row,QueryTonDauKyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QueryTonDauKyRowChangingEvent) Is Nothing) Then
                RaiseEvent QueryTonDauKyRowChanging(Me, New QueryTonDauKyRowChangeEvent(CType(e.Row,QueryTonDauKyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QueryTonDauKyRowDeletedEvent) Is Nothing) Then
                RaiseEvent QueryTonDauKyRowDeleted(Me, New QueryTonDauKyRowChangeEvent(CType(e.Row,QueryTonDauKyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QueryTonDauKyRowDeletingEvent) Is Nothing) Then
                RaiseEvent QueryTonDauKyRowDeleting(Me, New QueryTonDauKyRowChangeEvent(CType(e.Row,QueryTonDauKyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQueryTonDauKyRow(ByVal row As QueryTonDauKyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryTonDauKyRow
        Inherits DataRow
        
        Private tableQueryTonDauKy As QueryTonDauKyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQueryTonDauKy = CType(Me.Table,QueryTonDauKyDataTable)
        End Sub
        
        Public Property DauKy As Double
            Get
                Try 
                    Return CType(Me(Me.tableQueryTonDauKy.DauKyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryTonDauKy.DauKyColumn) = value
            End Set
        End Property
        
        Public Function IsDauKyNull() As Boolean
            Return Me.IsNull(Me.tableQueryTonDauKy.DauKyColumn)
        End Function
        
        Public Sub SetDauKyNull()
            Me(Me.tableQueryTonDauKy.DauKyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryTonDauKyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QueryTonDauKyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QueryTonDauKyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QueryTonDauKyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryTonCuoiKyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuoiKy As DataColumn
        
        Friend Sub New()
            MyBase.New("QueryTonCuoiKy")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuoiKyColumn As DataColumn
            Get
                Return Me.columnCuoiKy
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QueryTonCuoiKyRow
            Get
                Return CType(Me.Rows(index),QueryTonCuoiKyRow)
            End Get
        End Property
        
        Public Event QueryTonCuoiKyRowChanged As QueryTonCuoiKyRowChangeEventHandler
        
        Public Event QueryTonCuoiKyRowChanging As QueryTonCuoiKyRowChangeEventHandler
        
        Public Event QueryTonCuoiKyRowDeleted As QueryTonCuoiKyRowChangeEventHandler
        
        Public Event QueryTonCuoiKyRowDeleting As QueryTonCuoiKyRowChangeEventHandler
        
        Public Overloads Sub AddQueryTonCuoiKyRow(ByVal row As QueryTonCuoiKyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQueryTonCuoiKyRow(ByVal CuoiKy As Double) As QueryTonCuoiKyRow
            Dim rowQueryTonCuoiKyRow As QueryTonCuoiKyRow = CType(Me.NewRow,QueryTonCuoiKyRow)
            rowQueryTonCuoiKyRow.ItemArray = New Object() {CuoiKy}
            Me.Rows.Add(rowQueryTonCuoiKyRow)
            Return rowQueryTonCuoiKyRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QueryTonCuoiKyDataTable = CType(MyBase.Clone,QueryTonCuoiKyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QueryTonCuoiKyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuoiKy = Me.Columns("CuoiKy")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuoiKy = New DataColumn("CuoiKy", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuoiKy)
            Me.columnCuoiKy.ReadOnly = true
        End Sub
        
        Public Function NewQueryTonCuoiKyRow() As QueryTonCuoiKyRow
            Return CType(Me.NewRow,QueryTonCuoiKyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QueryTonCuoiKyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QueryTonCuoiKyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QueryTonCuoiKyRowChangedEvent) Is Nothing) Then
                RaiseEvent QueryTonCuoiKyRowChanged(Me, New QueryTonCuoiKyRowChangeEvent(CType(e.Row,QueryTonCuoiKyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QueryTonCuoiKyRowChangingEvent) Is Nothing) Then
                RaiseEvent QueryTonCuoiKyRowChanging(Me, New QueryTonCuoiKyRowChangeEvent(CType(e.Row,QueryTonCuoiKyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QueryTonCuoiKyRowDeletedEvent) Is Nothing) Then
                RaiseEvent QueryTonCuoiKyRowDeleted(Me, New QueryTonCuoiKyRowChangeEvent(CType(e.Row,QueryTonCuoiKyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QueryTonCuoiKyRowDeletingEvent) Is Nothing) Then
                RaiseEvent QueryTonCuoiKyRowDeleting(Me, New QueryTonCuoiKyRowChangeEvent(CType(e.Row,QueryTonCuoiKyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQueryTonCuoiKyRow(ByVal row As QueryTonCuoiKyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryTonCuoiKyRow
        Inherits DataRow
        
        Private tableQueryTonCuoiKy As QueryTonCuoiKyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQueryTonCuoiKy = CType(Me.Table,QueryTonCuoiKyDataTable)
        End Sub
        
        Public Property CuoiKy As Double
            Get
                Try 
                    Return CType(Me(Me.tableQueryTonCuoiKy.CuoiKyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQueryTonCuoiKy.CuoiKyColumn) = value
            End Set
        End Property
        
        Public Function IsCuoiKyNull() As Boolean
            Return Me.IsNull(Me.tableQueryTonCuoiKy.CuoiKyColumn)
        End Function
        
        Public Sub SetCuoiKyNull()
            Me(Me.tableQueryTonCuoiKy.CuoiKyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QueryTonCuoiKyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QueryTonCuoiKyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QueryTonCuoiKyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QueryTonCuoiKyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NgayBaoCaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTuNgay As DataColumn
        
        Private columnDenngay As DataColumn
        
        Friend Sub New()
            MyBase.New("NgayBaoCao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TuNgayColumn As DataColumn
            Get
                Return Me.columnTuNgay
            End Get
        End Property
        
        Friend ReadOnly Property DenngayColumn As DataColumn
            Get
                Return Me.columnDenngay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NgayBaoCaoRow
            Get
                Return CType(Me.Rows(index),NgayBaoCaoRow)
            End Get
        End Property
        
        Public Event NgayBaoCaoRowChanged As NgayBaoCaoRowChangeEventHandler
        
        Public Event NgayBaoCaoRowChanging As NgayBaoCaoRowChangeEventHandler
        
        Public Event NgayBaoCaoRowDeleted As NgayBaoCaoRowChangeEventHandler
        
        Public Event NgayBaoCaoRowDeleting As NgayBaoCaoRowChangeEventHandler
        
        Public Overloads Sub AddNgayBaoCaoRow(ByVal row As NgayBaoCaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNgayBaoCaoRow(ByVal TuNgay As String, ByVal Denngay As String) As NgayBaoCaoRow
            Dim rowNgayBaoCaoRow As NgayBaoCaoRow = CType(Me.NewRow,NgayBaoCaoRow)
            rowNgayBaoCaoRow.ItemArray = New Object() {TuNgay, Denngay}
            Me.Rows.Add(rowNgayBaoCaoRow)
            Return rowNgayBaoCaoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NgayBaoCaoDataTable = CType(MyBase.Clone,NgayBaoCaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NgayBaoCaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTuNgay = Me.Columns("TuNgay")
            Me.columnDenngay = Me.Columns("Denngay")
        End Sub
        
        Private Sub InitClass()
            Me.columnTuNgay = New DataColumn("TuNgay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTuNgay)
            Me.columnDenngay = New DataColumn("Denngay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDenngay)
        End Sub
        
        Public Function NewNgayBaoCaoRow() As NgayBaoCaoRow
            Return CType(Me.NewRow,NgayBaoCaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NgayBaoCaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NgayBaoCaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NgayBaoCaoRowChangedEvent) Is Nothing) Then
                RaiseEvent NgayBaoCaoRowChanged(Me, New NgayBaoCaoRowChangeEvent(CType(e.Row,NgayBaoCaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NgayBaoCaoRowChangingEvent) Is Nothing) Then
                RaiseEvent NgayBaoCaoRowChanging(Me, New NgayBaoCaoRowChangeEvent(CType(e.Row,NgayBaoCaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NgayBaoCaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent NgayBaoCaoRowDeleted(Me, New NgayBaoCaoRowChangeEvent(CType(e.Row,NgayBaoCaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NgayBaoCaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent NgayBaoCaoRowDeleting(Me, New NgayBaoCaoRowChangeEvent(CType(e.Row,NgayBaoCaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNgayBaoCaoRow(ByVal row As NgayBaoCaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NgayBaoCaoRow
        Inherits DataRow
        
        Private tableNgayBaoCao As NgayBaoCaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNgayBaoCao = CType(Me.Table,NgayBaoCaoDataTable)
        End Sub
        
        Public Property TuNgay As String
            Get
                Try 
                    Return CType(Me(Me.tableNgayBaoCao.TuNgayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNgayBaoCao.TuNgayColumn) = value
            End Set
        End Property
        
        Public Property Denngay As String
            Get
                Try 
                    Return CType(Me(Me.tableNgayBaoCao.DenngayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNgayBaoCao.DenngayColumn) = value
            End Set
        End Property
        
        Public Function IsTuNgayNull() As Boolean
            Return Me.IsNull(Me.tableNgayBaoCao.TuNgayColumn)
        End Function
        
        Public Sub SetTuNgayNull()
            Me(Me.tableNgayBaoCao.TuNgayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDenngayNull() As Boolean
            Return Me.IsNull(Me.tableNgayBaoCao.DenngayColumn)
        End Function
        
        Public Sub SetDenngayNull()
            Me(Me.tableNgayBaoCao.DenngayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NgayBaoCaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NgayBaoCaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NgayBaoCaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NgayBaoCaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
