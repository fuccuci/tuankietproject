'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsBaoCaoThuChi
    Inherits DataSet
    
    Private tableqryCountry As qryCountryDataTable
    
    Private tableqryBaoCaoThuChi As qryBaoCaoThuChiDataTable
    
    Private tableqryNgay As qryNgayDataTable
    
    Private tableqryBaoCaoGNT As qryBaoCaoGNTDataTable
    
    Private tableQryReportsUNC As QryReportsUNCDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("qryCountry")) Is Nothing) Then
                Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
            End If
            If (Not (ds.Tables("qryBaoCaoThuChi")) Is Nothing) Then
                Me.Tables.Add(New qryBaoCaoThuChiDataTable(ds.Tables("qryBaoCaoThuChi")))
            End If
            If (Not (ds.Tables("qryNgay")) Is Nothing) Then
                Me.Tables.Add(New qryNgayDataTable(ds.Tables("qryNgay")))
            End If
            If (Not (ds.Tables("qryBaoCaoGNT")) Is Nothing) Then
                Me.Tables.Add(New qryBaoCaoGNTDataTable(ds.Tables("qryBaoCaoGNT")))
            End If
            If (Not (ds.Tables("QryReportsUNC")) Is Nothing) Then
                Me.Tables.Add(New QryReportsUNCDataTable(ds.Tables("QryReportsUNC")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryCountry As qryCountryDataTable
        Get
            Return Me.tableqryCountry
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryBaoCaoThuChi As qryBaoCaoThuChiDataTable
        Get
            Return Me.tableqryBaoCaoThuChi
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryNgay As qryNgayDataTable
        Get
            Return Me.tableqryNgay
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryBaoCaoGNT As qryBaoCaoGNTDataTable
        Get
            Return Me.tableqryBaoCaoGNT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QryReportsUNC As QryReportsUNCDataTable
        Get
            Return Me.tableQryReportsUNC
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsBaoCaoThuChi = CType(MyBase.Clone,dsBaoCaoThuChi)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("qryCountry")) Is Nothing) Then
            Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
        End If
        If (Not (ds.Tables("qryBaoCaoThuChi")) Is Nothing) Then
            Me.Tables.Add(New qryBaoCaoThuChiDataTable(ds.Tables("qryBaoCaoThuChi")))
        End If
        If (Not (ds.Tables("qryNgay")) Is Nothing) Then
            Me.Tables.Add(New qryNgayDataTable(ds.Tables("qryNgay")))
        End If
        If (Not (ds.Tables("qryBaoCaoGNT")) Is Nothing) Then
            Me.Tables.Add(New qryBaoCaoGNTDataTable(ds.Tables("qryBaoCaoGNT")))
        End If
        If (Not (ds.Tables("QryReportsUNC")) Is Nothing) Then
            Me.Tables.Add(New QryReportsUNCDataTable(ds.Tables("QryReportsUNC")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableqryCountry = CType(Me.Tables("qryCountry"),qryCountryDataTable)
        If (Not (Me.tableqryCountry) Is Nothing) Then
            Me.tableqryCountry.InitVars
        End If
        Me.tableqryBaoCaoThuChi = CType(Me.Tables("qryBaoCaoThuChi"),qryBaoCaoThuChiDataTable)
        If (Not (Me.tableqryBaoCaoThuChi) Is Nothing) Then
            Me.tableqryBaoCaoThuChi.InitVars
        End If
        Me.tableqryNgay = CType(Me.Tables("qryNgay"),qryNgayDataTable)
        If (Not (Me.tableqryNgay) Is Nothing) Then
            Me.tableqryNgay.InitVars
        End If
        Me.tableqryBaoCaoGNT = CType(Me.Tables("qryBaoCaoGNT"),qryBaoCaoGNTDataTable)
        If (Not (Me.tableqryBaoCaoGNT) Is Nothing) Then
            Me.tableqryBaoCaoGNT.InitVars
        End If
        Me.tableQryReportsUNC = CType(Me.Tables("QryReportsUNC"),QryReportsUNCDataTable)
        If (Not (Me.tableQryReportsUNC) Is Nothing) Then
            Me.tableQryReportsUNC.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsBaoCaoThuChi"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsBaoCaoThuChi.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableqryCountry = New qryCountryDataTable
        Me.Tables.Add(Me.tableqryCountry)
        Me.tableqryBaoCaoThuChi = New qryBaoCaoThuChiDataTable
        Me.Tables.Add(Me.tableqryBaoCaoThuChi)
        Me.tableqryNgay = New qryNgayDataTable
        Me.Tables.Add(Me.tableqryNgay)
        Me.tableqryBaoCaoGNT = New qryBaoCaoGNTDataTable
        Me.Tables.Add(Me.tableqryBaoCaoGNT)
        Me.tableQryReportsUNC = New QryReportsUNCDataTable
        Me.Tables.Add(Me.tableQryReportsUNC)
    End Sub
    
    Private Function ShouldSerializeqryCountry() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryBaoCaoThuChi() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryNgay() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryBaoCaoGNT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQryReportsUNC() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub qryCountryRowChangeEventHandler(ByVal sender As Object, ByVal e As qryCountryRowChangeEvent)
    
    Public Delegate Sub qryBaoCaoThuChiRowChangeEventHandler(ByVal sender As Object, ByVal e As qryBaoCaoThuChiRowChangeEvent)
    
    Public Delegate Sub qryNgayRowChangeEventHandler(ByVal sender As Object, ByVal e As qryNgayRowChangeEvent)
    
    Public Delegate Sub qryBaoCaoGNTRowChangeEventHandler(ByVal sender As Object, ByVal e As qryBaoCaoGNTRowChangeEvent)
    
    Public Delegate Sub QryReportsUNCRowChangeEventHandler(ByVal sender As Object, ByVal e As QryReportsUNCRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCountryName As DataColumn
        
        Private columnStationName As DataColumn
        
        Friend Sub New()
            MyBase.New("qryCountry")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CountryNameColumn As DataColumn
            Get
                Return Me.columnCountryName
            End Get
        End Property
        
        Friend ReadOnly Property StationNameColumn As DataColumn
            Get
                Return Me.columnStationName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryCountryRow
            Get
                Return CType(Me.Rows(index),qryCountryRow)
            End Get
        End Property
        
        Public Event qryCountryRowChanged As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowChanging As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleted As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleting As qryCountryRowChangeEventHandler
        
        Public Overloads Sub AddqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryCountryRow(ByVal CountryName As String, ByVal StationName As String) As qryCountryRow
            Dim rowqryCountryRow As qryCountryRow = CType(Me.NewRow,qryCountryRow)
            rowqryCountryRow.ItemArray = New Object() {CountryName, StationName}
            Me.Rows.Add(rowqryCountryRow)
            Return rowqryCountryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryCountryDataTable = CType(MyBase.Clone,qryCountryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryCountryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCountryName = Me.Columns("CountryName")
            Me.columnStationName = Me.Columns("StationName")
        End Sub
        
        Private Sub InitClass()
            Me.columnCountryName = New DataColumn("CountryName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryName)
            Me.columnStationName = New DataColumn("StationName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStationName)
        End Sub
        
        Public Function NewqryCountryRow() As qryCountryRow
            Return CType(Me.NewRow,qryCountryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryCountryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryCountryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryCountryRowChangedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanged(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryCountryRowChangingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanging(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryCountryRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleted(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryCountryRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleting(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRow
        Inherits DataRow
        
        Private tableqryCountry As qryCountryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryCountry = CType(Me.Table,qryCountryDataTable)
        End Sub
        
        Public Property CountryName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.CountryNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.CountryNameColumn) = value
            End Set
        End Property
        
        Public Property StationName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.StationNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.StationNameColumn) = value
            End Set
        End Property
        
        Public Function IsCountryNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.CountryNameColumn)
        End Function
        
        Public Sub SetCountryNameNull()
            Me(Me.tableqryCountry.CountryNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStationNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.StationNameColumn)
        End Function
        
        Public Sub SetStationNameNull()
            Me(Me.tableqryCountry.StationNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryCountryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryCountryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryCountryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryBaoCaoThuChiDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRecei_Expen_Date As DataColumn
        
        Private columnRecei_No As DataColumn
        
        Private columnExpen_No As DataColumn
        
        Private columnCharge_Cycle As DataColumn
        
        Private columnDescriptions As DataColumn
        
        Private columnRecei_Money As DataColumn
        
        Private columnExpen_Money As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnService_Code As DataColumn
        
        Private columnList_Quantity As DataColumn
        
        Private columnInvoice_Quantity As DataColumn
        
        Private columnList_Detail As DataColumn
        
        Friend Sub New()
            MyBase.New("qryBaoCaoThuChi")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Recei_Expen_DateColumn As DataColumn
            Get
                Return Me.columnRecei_Expen_Date
            End Get
        End Property
        
        Friend ReadOnly Property Recei_NoColumn As DataColumn
            Get
                Return Me.columnRecei_No
            End Get
        End Property
        
        Friend ReadOnly Property Expen_NoColumn As DataColumn
            Get
                Return Me.columnExpen_No
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CycleColumn As DataColumn
            Get
                Return Me.columnCharge_Cycle
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionsColumn As DataColumn
            Get
                Return Me.columnDescriptions
            End Get
        End Property
        
        Friend ReadOnly Property Recei_MoneyColumn As DataColumn
            Get
                Return Me.columnRecei_Money
            End Get
        End Property
        
        Friend ReadOnly Property Expen_MoneyColumn As DataColumn
            Get
                Return Me.columnExpen_Money
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property Service_CodeColumn As DataColumn
            Get
                Return Me.columnService_Code
            End Get
        End Property
        
        Friend ReadOnly Property List_QuantityColumn As DataColumn
            Get
                Return Me.columnList_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityColumn As DataColumn
            Get
                Return Me.columnInvoice_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property List_DetailColumn As DataColumn
            Get
                Return Me.columnList_Detail
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryBaoCaoThuChiRow
            Get
                Return CType(Me.Rows(index),qryBaoCaoThuChiRow)
            End Get
        End Property
        
        Public Event qryBaoCaoThuChiRowChanged As qryBaoCaoThuChiRowChangeEventHandler
        
        Public Event qryBaoCaoThuChiRowChanging As qryBaoCaoThuChiRowChangeEventHandler
        
        Public Event qryBaoCaoThuChiRowDeleted As qryBaoCaoThuChiRowChangeEventHandler
        
        Public Event qryBaoCaoThuChiRowDeleting As qryBaoCaoThuChiRowChangeEventHandler
        
        Public Overloads Sub AddqryBaoCaoThuChiRow(ByVal row As qryBaoCaoThuChiRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryBaoCaoThuChiRow(ByVal Recei_Expen_Date As Date, ByVal Recei_No As Long, ByVal Expen_No As Long, ByVal Charge_Cycle As Date, ByVal Descriptions As String, ByVal Recei_Money As Double, ByVal Expen_Money As Double, ByVal Employ_Code As String, ByVal Service_Code As String, ByVal List_Quantity As Integer, ByVal Invoice_Quantity As Integer, ByVal List_Detail As String) As qryBaoCaoThuChiRow
            Dim rowqryBaoCaoThuChiRow As qryBaoCaoThuChiRow = CType(Me.NewRow,qryBaoCaoThuChiRow)
            rowqryBaoCaoThuChiRow.ItemArray = New Object() {Recei_Expen_Date, Recei_No, Expen_No, Charge_Cycle, Descriptions, Recei_Money, Expen_Money, Employ_Code, Service_Code, List_Quantity, Invoice_Quantity, List_Detail}
            Me.Rows.Add(rowqryBaoCaoThuChiRow)
            Return rowqryBaoCaoThuChiRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryBaoCaoThuChiDataTable = CType(MyBase.Clone,qryBaoCaoThuChiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryBaoCaoThuChiDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRecei_Expen_Date = Me.Columns("Recei_Expen_Date")
            Me.columnRecei_No = Me.Columns("Recei_No")
            Me.columnExpen_No = Me.Columns("Expen_No")
            Me.columnCharge_Cycle = Me.Columns("Charge_Cycle")
            Me.columnDescriptions = Me.Columns("Descriptions")
            Me.columnRecei_Money = Me.Columns("Recei_Money")
            Me.columnExpen_Money = Me.Columns("Expen_Money")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnService_Code = Me.Columns("Service_Code")
            Me.columnList_Quantity = Me.Columns("List_Quantity")
            Me.columnInvoice_Quantity = Me.Columns("Invoice_Quantity")
            Me.columnList_Detail = Me.Columns("List_Detail")
        End Sub
        
        Private Sub InitClass()
            Me.columnRecei_Expen_Date = New DataColumn("Recei_Expen_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Expen_Date)
            Me.columnRecei_No = New DataColumn("Recei_No", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_No)
            Me.columnExpen_No = New DataColumn("Expen_No", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpen_No)
            Me.columnCharge_Cycle = New DataColumn("Charge_Cycle", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Cycle)
            Me.columnDescriptions = New DataColumn("Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptions)
            Me.columnRecei_Money = New DataColumn("Recei_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Money)
            Me.columnExpen_Money = New DataColumn("Expen_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpen_Money)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnService_Code = New DataColumn("Service_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Code)
            Me.columnList_Quantity = New DataColumn("List_Quantity", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_Quantity)
            Me.columnInvoice_Quantity = New DataColumn("Invoice_Quantity", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Quantity)
            Me.columnList_Detail = New DataColumn("List_Detail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_Detail)
        End Sub
        
        Public Function NewqryBaoCaoThuChiRow() As qryBaoCaoThuChiRow
            Return CType(Me.NewRow,qryBaoCaoThuChiRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryBaoCaoThuChiRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryBaoCaoThuChiRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryBaoCaoThuChiRowChangedEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoThuChiRowChanged(Me, New qryBaoCaoThuChiRowChangeEvent(CType(e.Row,qryBaoCaoThuChiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryBaoCaoThuChiRowChangingEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoThuChiRowChanging(Me, New qryBaoCaoThuChiRowChangeEvent(CType(e.Row,qryBaoCaoThuChiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryBaoCaoThuChiRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoThuChiRowDeleted(Me, New qryBaoCaoThuChiRowChangeEvent(CType(e.Row,qryBaoCaoThuChiRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryBaoCaoThuChiRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoThuChiRowDeleting(Me, New qryBaoCaoThuChiRowChangeEvent(CType(e.Row,qryBaoCaoThuChiRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryBaoCaoThuChiRow(ByVal row As qryBaoCaoThuChiRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryBaoCaoThuChiRow
        Inherits DataRow
        
        Private tableqryBaoCaoThuChi As qryBaoCaoThuChiDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryBaoCaoThuChi = CType(Me.Table,qryBaoCaoThuChiDataTable)
        End Sub
        
        Public Property Recei_Expen_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Recei_Expen_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Recei_Expen_DateColumn) = value
            End Set
        End Property
        
        Public Property Recei_No As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Recei_NoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Recei_NoColumn) = value
            End Set
        End Property
        
        Public Property Expen_No As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Expen_NoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Expen_NoColumn) = value
            End Set
        End Property
        
        Public Property Charge_Cycle As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Charge_CycleColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Charge_CycleColumn) = value
            End Set
        End Property
        
        Public Property Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property Recei_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Recei_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Recei_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Expen_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Expen_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Expen_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property Service_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Service_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Service_CodeColumn) = value
            End Set
        End Property
        
        Public Property List_Quantity As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.List_QuantityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.List_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Invoice_Quantity As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.Invoice_QuantityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.Invoice_QuantityColumn) = value
            End Set
        End Property
        
        Public Property List_Detail As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoThuChi.List_DetailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoThuChi.List_DetailColumn) = value
            End Set
        End Property
        
        Public Function IsRecei_Expen_DateNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Recei_Expen_DateColumn)
        End Function
        
        Public Sub SetRecei_Expen_DateNull()
            Me(Me.tableqryBaoCaoThuChi.Recei_Expen_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_NoNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Recei_NoColumn)
        End Function
        
        Public Sub SetRecei_NoNull()
            Me(Me.tableqryBaoCaoThuChi.Recei_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpen_NoNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Expen_NoColumn)
        End Function
        
        Public Sub SetExpen_NoNull()
            Me(Me.tableqryBaoCaoThuChi.Expen_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CycleNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Charge_CycleColumn)
        End Function
        
        Public Sub SetCharge_CycleNull()
            Me(Me.tableqryBaoCaoThuChi.Charge_CycleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.DescriptionsColumn)
        End Function
        
        Public Sub SetDescriptionsNull()
            Me(Me.tableqryBaoCaoThuChi.DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Recei_MoneyColumn)
        End Function
        
        Public Sub SetRecei_MoneyNull()
            Me(Me.tableqryBaoCaoThuChi.Recei_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpen_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Expen_MoneyColumn)
        End Function
        
        Public Sub SetExpen_MoneyNull()
            Me(Me.tableqryBaoCaoThuChi.Expen_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableqryBaoCaoThuChi.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsService_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Service_CodeColumn)
        End Function
        
        Public Sub SetService_CodeNull()
            Me(Me.tableqryBaoCaoThuChi.Service_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.List_QuantityColumn)
        End Function
        
        Public Sub SetList_QuantityNull()
            Me(Me.tableqryBaoCaoThuChi.List_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.Invoice_QuantityColumn)
        End Function
        
        Public Sub SetInvoice_QuantityNull()
            Me(Me.tableqryBaoCaoThuChi.Invoice_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_DetailNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoThuChi.List_DetailColumn)
        End Function
        
        Public Sub SetList_DetailNull()
            Me(Me.tableqryBaoCaoThuChi.List_DetailColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryBaoCaoThuChiRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryBaoCaoThuChiRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryBaoCaoThuChiRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryBaoCaoThuChiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfromDate As DataColumn
        
        Private columntoDate As DataColumn
        
        Friend Sub New()
            MyBase.New("qryNgay")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fromDateColumn As DataColumn
            Get
                Return Me.columnfromDate
            End Get
        End Property
        
        Friend ReadOnly Property toDateColumn As DataColumn
            Get
                Return Me.columntoDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryNgayRow
            Get
                Return CType(Me.Rows(index),qryNgayRow)
            End Get
        End Property
        
        Public Event qryNgayRowChanged As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowChanging As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowDeleted As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowDeleting As qryNgayRowChangeEventHandler
        
        Public Overloads Sub AddqryNgayRow(ByVal row As qryNgayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryNgayRow(ByVal fromDate As Date, ByVal toDate As Date) As qryNgayRow
            Dim rowqryNgayRow As qryNgayRow = CType(Me.NewRow,qryNgayRow)
            rowqryNgayRow.ItemArray = New Object() {fromDate, toDate}
            Me.Rows.Add(rowqryNgayRow)
            Return rowqryNgayRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryNgayDataTable = CType(MyBase.Clone,qryNgayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryNgayDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfromDate = Me.Columns("fromDate")
            Me.columntoDate = Me.Columns("toDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnfromDate = New DataColumn("fromDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromDate)
            Me.columntoDate = New DataColumn("toDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntoDate)
        End Sub
        
        Public Function NewqryNgayRow() As qryNgayRow
            Return CType(Me.NewRow,qryNgayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryNgayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryNgayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryNgayRowChangedEvent) Is Nothing) Then
                RaiseEvent qryNgayRowChanged(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryNgayRowChangingEvent) Is Nothing) Then
                RaiseEvent qryNgayRowChanging(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryNgayRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryNgayRowDeleted(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryNgayRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryNgayRowDeleting(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryNgayRow(ByVal row As qryNgayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayRow
        Inherits DataRow
        
        Private tableqryNgay As qryNgayDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryNgay = CType(Me.Table,qryNgayDataTable)
        End Sub
        
        Public Property fromDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryNgay.fromDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNgay.fromDateColumn) = value
            End Set
        End Property
        
        Public Property toDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryNgay.toDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNgay.toDateColumn) = value
            End Set
        End Property
        
        Public Function IsfromDateNull() As Boolean
            Return Me.IsNull(Me.tableqryNgay.fromDateColumn)
        End Function
        
        Public Sub SetfromDateNull()
            Me(Me.tableqryNgay.fromDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstoDateNull() As Boolean
            Return Me.IsNull(Me.tableqryNgay.toDateColumn)
        End Function
        
        Public Sub SettoDateNull()
            Me(Me.tableqryNgay.toDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryNgayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryNgayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryNgayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryBaoCaoGNTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNgayNop As DataColumn
        
        Private columnSoPT As DataColumn
        
        Private columnSoGNT As DataColumn
        
        Private columnKyCuoc As DataColumn
        
        Private columnMoTa As DataColumn
        
        Private columnSoTK As DataColumn
        
        Private columnSoTT As DataColumn
        
        Private columnNguoiNop As DataColumn
        
        Private columnDichVu As DataColumn
        
        Private columnSLBK As DataColumn
        
        Private columnCTBK As DataColumn
        
        Private columnSLHD As DataColumn
        
        Friend Sub New()
            MyBase.New("qryBaoCaoGNT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NgayNopColumn As DataColumn
            Get
                Return Me.columnNgayNop
            End Get
        End Property
        
        Friend ReadOnly Property SoPTColumn As DataColumn
            Get
                Return Me.columnSoPT
            End Get
        End Property
        
        Friend ReadOnly Property SoGNTColumn As DataColumn
            Get
                Return Me.columnSoGNT
            End Get
        End Property
        
        Friend ReadOnly Property KyCuocColumn As DataColumn
            Get
                Return Me.columnKyCuoc
            End Get
        End Property
        
        Friend ReadOnly Property MoTaColumn As DataColumn
            Get
                Return Me.columnMoTa
            End Get
        End Property
        
        Friend ReadOnly Property SoTKColumn As DataColumn
            Get
                Return Me.columnSoTK
            End Get
        End Property
        
        Friend ReadOnly Property SoTTColumn As DataColumn
            Get
                Return Me.columnSoTT
            End Get
        End Property
        
        Friend ReadOnly Property NguoiNopColumn As DataColumn
            Get
                Return Me.columnNguoiNop
            End Get
        End Property
        
        Friend ReadOnly Property DichVuColumn As DataColumn
            Get
                Return Me.columnDichVu
            End Get
        End Property
        
        Friend ReadOnly Property SLBKColumn As DataColumn
            Get
                Return Me.columnSLBK
            End Get
        End Property
        
        Friend ReadOnly Property CTBKColumn As DataColumn
            Get
                Return Me.columnCTBK
            End Get
        End Property
        
        Friend ReadOnly Property SLHDColumn As DataColumn
            Get
                Return Me.columnSLHD
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryBaoCaoGNTRow
            Get
                Return CType(Me.Rows(index),qryBaoCaoGNTRow)
            End Get
        End Property
        
        Public Event qryBaoCaoGNTRowChanged As qryBaoCaoGNTRowChangeEventHandler
        
        Public Event qryBaoCaoGNTRowChanging As qryBaoCaoGNTRowChangeEventHandler
        
        Public Event qryBaoCaoGNTRowDeleted As qryBaoCaoGNTRowChangeEventHandler
        
        Public Event qryBaoCaoGNTRowDeleting As qryBaoCaoGNTRowChangeEventHandler
        
        Public Overloads Sub AddqryBaoCaoGNTRow(ByVal row As qryBaoCaoGNTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryBaoCaoGNTRow(ByVal NgayNop As Date, ByVal SoPT As Long, ByVal SoGNT As Long, ByVal KyCuoc As Date, ByVal MoTa As String, ByVal SoTK As String, ByVal SoTT As Double, ByVal NguoiNop As String, ByVal DichVu As String, ByVal SLBK As Long, ByVal CTBK As String, ByVal SLHD As Integer) As qryBaoCaoGNTRow
            Dim rowqryBaoCaoGNTRow As qryBaoCaoGNTRow = CType(Me.NewRow,qryBaoCaoGNTRow)
            rowqryBaoCaoGNTRow.ItemArray = New Object() {NgayNop, SoPT, SoGNT, KyCuoc, MoTa, SoTK, SoTT, NguoiNop, DichVu, SLBK, CTBK, SLHD}
            Me.Rows.Add(rowqryBaoCaoGNTRow)
            Return rowqryBaoCaoGNTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryBaoCaoGNTDataTable = CType(MyBase.Clone,qryBaoCaoGNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryBaoCaoGNTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNgayNop = Me.Columns("NgayNop")
            Me.columnSoPT = Me.Columns("SoPT")
            Me.columnSoGNT = Me.Columns("SoGNT")
            Me.columnKyCuoc = Me.Columns("KyCuoc")
            Me.columnMoTa = Me.Columns("MoTa")
            Me.columnSoTK = Me.Columns("SoTK")
            Me.columnSoTT = Me.Columns("SoTT")
            Me.columnNguoiNop = Me.Columns("NguoiNop")
            Me.columnDichVu = Me.Columns("DichVu")
            Me.columnSLBK = Me.Columns("SLBK")
            Me.columnCTBK = Me.Columns("CTBK")
            Me.columnSLHD = Me.Columns("SLHD")
        End Sub
        
        Private Sub InitClass()
            Me.columnNgayNop = New DataColumn("NgayNop", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgayNop)
            Me.columnSoPT = New DataColumn("SoPT", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoPT)
            Me.columnSoGNT = New DataColumn("SoGNT", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoGNT)
            Me.columnKyCuoc = New DataColumn("KyCuoc", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKyCuoc)
            Me.columnMoTa = New DataColumn("MoTa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMoTa)
            Me.columnSoTK = New DataColumn("SoTK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoTK)
            Me.columnSoTT = New DataColumn("SoTT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoTT)
            Me.columnNguoiNop = New DataColumn("NguoiNop", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNguoiNop)
            Me.columnDichVu = New DataColumn("DichVu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDichVu)
            Me.columnSLBK = New DataColumn("SLBK", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLBK)
            Me.columnCTBK = New DataColumn("CTBK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTBK)
            Me.columnSLHD = New DataColumn("SLHD", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLHD)
        End Sub
        
        Public Function NewqryBaoCaoGNTRow() As qryBaoCaoGNTRow
            Return CType(Me.NewRow,qryBaoCaoGNTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryBaoCaoGNTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryBaoCaoGNTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryBaoCaoGNTRowChangedEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoGNTRowChanged(Me, New qryBaoCaoGNTRowChangeEvent(CType(e.Row,qryBaoCaoGNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryBaoCaoGNTRowChangingEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoGNTRowChanging(Me, New qryBaoCaoGNTRowChangeEvent(CType(e.Row,qryBaoCaoGNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryBaoCaoGNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoGNTRowDeleted(Me, New qryBaoCaoGNTRowChangeEvent(CType(e.Row,qryBaoCaoGNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryBaoCaoGNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryBaoCaoGNTRowDeleting(Me, New qryBaoCaoGNTRowChangeEvent(CType(e.Row,qryBaoCaoGNTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryBaoCaoGNTRow(ByVal row As qryBaoCaoGNTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryBaoCaoGNTRow
        Inherits DataRow
        
        Private tableqryBaoCaoGNT As qryBaoCaoGNTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryBaoCaoGNT = CType(Me.Table,qryBaoCaoGNTDataTable)
        End Sub
        
        Public Property NgayNop As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.NgayNopColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.NgayNopColumn) = value
            End Set
        End Property
        
        Public Property SoPT As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.SoPTColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.SoPTColumn) = value
            End Set
        End Property
        
        Public Property SoGNT As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.SoGNTColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.SoGNTColumn) = value
            End Set
        End Property
        
        Public Property KyCuoc As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.KyCuocColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.KyCuocColumn) = value
            End Set
        End Property
        
        Public Property MoTa As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.MoTaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.MoTaColumn) = value
            End Set
        End Property
        
        Public Property SoTK As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.SoTKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.SoTKColumn) = value
            End Set
        End Property
        
        Public Property SoTT As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.SoTTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.SoTTColumn) = value
            End Set
        End Property
        
        Public Property NguoiNop As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.NguoiNopColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.NguoiNopColumn) = value
            End Set
        End Property
        
        Public Property DichVu As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.DichVuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.DichVuColumn) = value
            End Set
        End Property
        
        Public Property SLBK As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.SLBKColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.SLBKColumn) = value
            End Set
        End Property
        
        Public Property CTBK As String
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.CTBKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.CTBKColumn) = value
            End Set
        End Property
        
        Public Property SLHD As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryBaoCaoGNT.SLHDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryBaoCaoGNT.SLHDColumn) = value
            End Set
        End Property
        
        Public Function IsNgayNopNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.NgayNopColumn)
        End Function
        
        Public Sub SetNgayNopNull()
            Me(Me.tableqryBaoCaoGNT.NgayNopColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoPTNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.SoPTColumn)
        End Function
        
        Public Sub SetSoPTNull()
            Me(Me.tableqryBaoCaoGNT.SoPTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoGNTNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.SoGNTColumn)
        End Function
        
        Public Sub SetSoGNTNull()
            Me(Me.tableqryBaoCaoGNT.SoGNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKyCuocNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.KyCuocColumn)
        End Function
        
        Public Sub SetKyCuocNull()
            Me(Me.tableqryBaoCaoGNT.KyCuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMoTaNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.MoTaColumn)
        End Function
        
        Public Sub SetMoTaNull()
            Me(Me.tableqryBaoCaoGNT.MoTaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoTKNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.SoTKColumn)
        End Function
        
        Public Sub SetSoTKNull()
            Me(Me.tableqryBaoCaoGNT.SoTKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoTTNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.SoTTColumn)
        End Function
        
        Public Sub SetSoTTNull()
            Me(Me.tableqryBaoCaoGNT.SoTTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNguoiNopNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.NguoiNopColumn)
        End Function
        
        Public Sub SetNguoiNopNull()
            Me(Me.tableqryBaoCaoGNT.NguoiNopColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDichVuNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.DichVuColumn)
        End Function
        
        Public Sub SetDichVuNull()
            Me(Me.tableqryBaoCaoGNT.DichVuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSLBKNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.SLBKColumn)
        End Function
        
        Public Sub SetSLBKNull()
            Me(Me.tableqryBaoCaoGNT.SLBKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCTBKNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.CTBKColumn)
        End Function
        
        Public Sub SetCTBKNull()
            Me(Me.tableqryBaoCaoGNT.CTBKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSLHDNull() As Boolean
            Return Me.IsNull(Me.tableqryBaoCaoGNT.SLHDColumn)
        End Function
        
        Public Sub SetSLHDNull()
            Me(Me.tableqryBaoCaoGNT.SLHDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryBaoCaoGNTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryBaoCaoGNTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryBaoCaoGNTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryBaoCaoGNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryReportsUNCDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnReceipt_Date As DataColumn
        
        Private columnOrdinal_No As DataColumn
        
        Private columnService_Code As DataColumn
        
        Private columnDescriptions As DataColumn
        
        Private columnList_Quantity As DataColumn
        
        Private columnInvoice_Quantity As DataColumn
        
        Private columnCharge_Cycle As DataColumn
        
        Private columnTotal_Money As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnSLUNC As DataColumn
        
        Friend Sub New()
            MyBase.New("QryReportsUNC")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Receipt_DateColumn As DataColumn
            Get
                Return Me.columnReceipt_Date
            End Get
        End Property
        
        Friend ReadOnly Property Ordinal_NoColumn As DataColumn
            Get
                Return Me.columnOrdinal_No
            End Get
        End Property
        
        Friend ReadOnly Property Service_CodeColumn As DataColumn
            Get
                Return Me.columnService_Code
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionsColumn As DataColumn
            Get
                Return Me.columnDescriptions
            End Get
        End Property
        
        Friend ReadOnly Property List_QuantityColumn As DataColumn
            Get
                Return Me.columnList_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityColumn As DataColumn
            Get
                Return Me.columnInvoice_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CycleColumn As DataColumn
            Get
                Return Me.columnCharge_Cycle
            End Get
        End Property
        
        Friend ReadOnly Property Total_MoneyColumn As DataColumn
            Get
                Return Me.columnTotal_Money
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property SLUNCColumn As DataColumn
            Get
                Return Me.columnSLUNC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QryReportsUNCRow
            Get
                Return CType(Me.Rows(index),QryReportsUNCRow)
            End Get
        End Property
        
        Public Event QryReportsUNCRowChanged As QryReportsUNCRowChangeEventHandler
        
        Public Event QryReportsUNCRowChanging As QryReportsUNCRowChangeEventHandler
        
        Public Event QryReportsUNCRowDeleted As QryReportsUNCRowChangeEventHandler
        
        Public Event QryReportsUNCRowDeleting As QryReportsUNCRowChangeEventHandler
        
        Public Overloads Sub AddQryReportsUNCRow(ByVal row As QryReportsUNCRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQryReportsUNCRow(ByVal Receipt_Date As Date, ByVal Ordinal_No As Long, ByVal Service_Code As String, ByVal Descriptions As String, ByVal List_Quantity As Short, ByVal Invoice_Quantity As Short, ByVal Charge_Cycle As Date, ByVal Total_Money As Double, ByVal Employ_Code As String, ByVal SLUNC As Short) As QryReportsUNCRow
            Dim rowQryReportsUNCRow As QryReportsUNCRow = CType(Me.NewRow,QryReportsUNCRow)
            rowQryReportsUNCRow.ItemArray = New Object() {Receipt_Date, Ordinal_No, Service_Code, Descriptions, List_Quantity, Invoice_Quantity, Charge_Cycle, Total_Money, Employ_Code, SLUNC}
            Me.Rows.Add(rowQryReportsUNCRow)
            Return rowQryReportsUNCRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QryReportsUNCDataTable = CType(MyBase.Clone,QryReportsUNCDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QryReportsUNCDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnReceipt_Date = Me.Columns("Receipt_Date")
            Me.columnOrdinal_No = Me.Columns("Ordinal_No")
            Me.columnService_Code = Me.Columns("Service_Code")
            Me.columnDescriptions = Me.Columns("Descriptions")
            Me.columnList_Quantity = Me.Columns("List_Quantity")
            Me.columnInvoice_Quantity = Me.Columns("Invoice_Quantity")
            Me.columnCharge_Cycle = Me.Columns("Charge_Cycle")
            Me.columnTotal_Money = Me.Columns("Total_Money")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnSLUNC = Me.Columns("SLUNC")
        End Sub
        
        Private Sub InitClass()
            Me.columnReceipt_Date = New DataColumn("Receipt_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceipt_Date)
            Me.columnOrdinal_No = New DataColumn("Ordinal_No", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinal_No)
            Me.columnService_Code = New DataColumn("Service_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Code)
            Me.columnDescriptions = New DataColumn("Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptions)
            Me.columnList_Quantity = New DataColumn("List_Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_Quantity)
            Me.columnInvoice_Quantity = New DataColumn("Invoice_Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Quantity)
            Me.columnCharge_Cycle = New DataColumn("Charge_Cycle", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Cycle)
            Me.columnTotal_Money = New DataColumn("Total_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal_Money)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnSLUNC = New DataColumn("SLUNC", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSLUNC)
        End Sub
        
        Public Function NewQryReportsUNCRow() As QryReportsUNCRow
            Return CType(Me.NewRow,QryReportsUNCRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QryReportsUNCRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QryReportsUNCRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QryReportsUNCRowChangedEvent) Is Nothing) Then
                RaiseEvent QryReportsUNCRowChanged(Me, New QryReportsUNCRowChangeEvent(CType(e.Row,QryReportsUNCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QryReportsUNCRowChangingEvent) Is Nothing) Then
                RaiseEvent QryReportsUNCRowChanging(Me, New QryReportsUNCRowChangeEvent(CType(e.Row,QryReportsUNCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QryReportsUNCRowDeletedEvent) Is Nothing) Then
                RaiseEvent QryReportsUNCRowDeleted(Me, New QryReportsUNCRowChangeEvent(CType(e.Row,QryReportsUNCRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QryReportsUNCRowDeletingEvent) Is Nothing) Then
                RaiseEvent QryReportsUNCRowDeleting(Me, New QryReportsUNCRowChangeEvent(CType(e.Row,QryReportsUNCRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQryReportsUNCRow(ByVal row As QryReportsUNCRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryReportsUNCRow
        Inherits DataRow
        
        Private tableQryReportsUNC As QryReportsUNCDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQryReportsUNC = CType(Me.Table,QryReportsUNCDataTable)
        End Sub
        
        Public Property Receipt_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.Receipt_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.Receipt_DateColumn) = value
            End Set
        End Property
        
        Public Property Ordinal_No As Long
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.Ordinal_NoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.Ordinal_NoColumn) = value
            End Set
        End Property
        
        Public Property Service_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.Service_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.Service_CodeColumn) = value
            End Set
        End Property
        
        Public Property Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property List_Quantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.List_QuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.List_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Invoice_Quantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.Invoice_QuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.Invoice_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Charge_Cycle As Date
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.Charge_CycleColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.Charge_CycleColumn) = value
            End Set
        End Property
        
        Public Property Total_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.Total_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.Total_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property SLUNC As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsUNC.SLUNCColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsUNC.SLUNCColumn) = value
            End Set
        End Property
        
        Public Function IsReceipt_DateNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.Receipt_DateColumn)
        End Function
        
        Public Sub SetReceipt_DateNull()
            Me(Me.tableQryReportsUNC.Receipt_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdinal_NoNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.Ordinal_NoColumn)
        End Function
        
        Public Sub SetOrdinal_NoNull()
            Me(Me.tableQryReportsUNC.Ordinal_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsService_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.Service_CodeColumn)
        End Function
        
        Public Sub SetService_CodeNull()
            Me(Me.tableQryReportsUNC.Service_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.DescriptionsColumn)
        End Function
        
        Public Sub SetDescriptionsNull()
            Me(Me.tableQryReportsUNC.DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.List_QuantityColumn)
        End Function
        
        Public Sub SetList_QuantityNull()
            Me(Me.tableQryReportsUNC.List_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.Invoice_QuantityColumn)
        End Function
        
        Public Sub SetInvoice_QuantityNull()
            Me(Me.tableQryReportsUNC.Invoice_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CycleNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.Charge_CycleColumn)
        End Function
        
        Public Sub SetCharge_CycleNull()
            Me(Me.tableQryReportsUNC.Charge_CycleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotal_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.Total_MoneyColumn)
        End Function
        
        Public Sub SetTotal_MoneyNull()
            Me(Me.tableQryReportsUNC.Total_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableQryReportsUNC.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSLUNCNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsUNC.SLUNCColumn)
        End Function
        
        Public Sub SetSLUNCNull()
            Me(Me.tableQryReportsUNC.SLUNCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryReportsUNCRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QryReportsUNCRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QryReportsUNCRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QryReportsUNCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
