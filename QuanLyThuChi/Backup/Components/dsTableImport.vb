'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsTableImport
    Inherits DataSet
    
    Private tableMyTable As MyTableDataTable
    
    Private tableSoLieuBaoCao As SoLieuBaoCaoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MyTable")) Is Nothing) Then
                Me.Tables.Add(New MyTableDataTable(ds.Tables("MyTable")))
            End If
            If (Not (ds.Tables("SoLieuBaoCao")) Is Nothing) Then
                Me.Tables.Add(New SoLieuBaoCaoDataTable(ds.Tables("SoLieuBaoCao")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MyTable As MyTableDataTable
        Get
            Return Me.tableMyTable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SoLieuBaoCao As SoLieuBaoCaoDataTable
        Get
            Return Me.tableSoLieuBaoCao
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsTableImport = CType(MyBase.Clone,dsTableImport)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MyTable")) Is Nothing) Then
            Me.Tables.Add(New MyTableDataTable(ds.Tables("MyTable")))
        End If
        If (Not (ds.Tables("SoLieuBaoCao")) Is Nothing) Then
            Me.Tables.Add(New SoLieuBaoCaoDataTable(ds.Tables("SoLieuBaoCao")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMyTable = CType(Me.Tables("MyTable"),MyTableDataTable)
        If (Not (Me.tableMyTable) Is Nothing) Then
            Me.tableMyTable.InitVars
        End If
        Me.tableSoLieuBaoCao = CType(Me.Tables("SoLieuBaoCao"),SoLieuBaoCaoDataTable)
        If (Not (Me.tableSoLieuBaoCao) Is Nothing) Then
            Me.tableSoLieuBaoCao.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsTableImport"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsTableImport.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMyTable = New MyTableDataTable
        Me.Tables.Add(Me.tableMyTable)
        Me.tableSoLieuBaoCao = New SoLieuBaoCaoDataTable
        Me.Tables.Add(Me.tableSoLieuBaoCao)
    End Sub
    
    Private Function ShouldSerializeMyTable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSoLieuBaoCao() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MyTableRowChangeEventHandler(ByVal sender As Object, ByVal e As MyTableRowChangeEvent)
    
    Public Delegate Sub SoLieuBaoCaoRowChangeEventHandler(ByVal sender As Object, ByVal e As SoLieuBaoCaoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MyTableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT As DataColumn
        
        Private columnTenKh As DataColumn
        
        Private columnMaKH As DataColumn
        
        Private columnSoTB As DataColumn
        
        Private columnItem_No As DataColumn
        
        Private columnDiaChi As DataColumn
        
        Private columnNoTruoc As DataColumn
        
        Private columnDieuChinh As DataColumn
        
        Private columnPhatSinh As DataColumn
        
        Private columnThue As DataColumn
        
        Private columnTongCuoc As DataColumn
        
        Private columnMaTram As DataColumn
        
        Private columnMaNV As DataColumn
        
        Friend Sub New()
            MyBase.New("MyTable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property TenKhColumn As DataColumn
            Get
                Return Me.columnTenKh
            End Get
        End Property
        
        Friend ReadOnly Property MaKHColumn As DataColumn
            Get
                Return Me.columnMaKH
            End Get
        End Property
        
        Friend ReadOnly Property SoTBColumn As DataColumn
            Get
                Return Me.columnSoTB
            End Get
        End Property
        
        Friend ReadOnly Property Item_NoColumn As DataColumn
            Get
                Return Me.columnItem_No
            End Get
        End Property
        
        Friend ReadOnly Property DiaChiColumn As DataColumn
            Get
                Return Me.columnDiaChi
            End Get
        End Property
        
        Friend ReadOnly Property NoTruocColumn As DataColumn
            Get
                Return Me.columnNoTruoc
            End Get
        End Property
        
        Friend ReadOnly Property DieuChinhColumn As DataColumn
            Get
                Return Me.columnDieuChinh
            End Get
        End Property
        
        Friend ReadOnly Property PhatSinhColumn As DataColumn
            Get
                Return Me.columnPhatSinh
            End Get
        End Property
        
        Friend ReadOnly Property ThueColumn As DataColumn
            Get
                Return Me.columnThue
            End Get
        End Property
        
        Friend ReadOnly Property TongCuocColumn As DataColumn
            Get
                Return Me.columnTongCuoc
            End Get
        End Property
        
        Friend ReadOnly Property MaTramColumn As DataColumn
            Get
                Return Me.columnMaTram
            End Get
        End Property
        
        Friend ReadOnly Property MaNVColumn As DataColumn
            Get
                Return Me.columnMaNV
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MyTableRow
            Get
                Return CType(Me.Rows(index),MyTableRow)
            End Get
        End Property
        
        Public Event MyTableRowChanged As MyTableRowChangeEventHandler
        
        Public Event MyTableRowChanging As MyTableRowChangeEventHandler
        
        Public Event MyTableRowDeleted As MyTableRowChangeEventHandler
        
        Public Event MyTableRowDeleting As MyTableRowChangeEventHandler
        
        Public Overloads Sub AddMyTableRow(ByVal row As MyTableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMyTableRow(ByVal STT As String, ByVal TenKh As String, ByVal MaKH As String, ByVal SoTB As String, ByVal Item_No As String, ByVal DiaChi As String, ByVal NoTruoc As Double, ByVal DieuChinh As Double, ByVal PhatSinh As Double, ByVal Thue As Double, ByVal TongCuoc As Double, ByVal MaTram As String, ByVal MaNV As String) As MyTableRow
            Dim rowMyTableRow As MyTableRow = CType(Me.NewRow,MyTableRow)
            rowMyTableRow.ItemArray = New Object() {STT, TenKh, MaKH, SoTB, Item_No, DiaChi, NoTruoc, DieuChinh, PhatSinh, Thue, TongCuoc, MaTram, MaNV}
            Me.Rows.Add(rowMyTableRow)
            Return rowMyTableRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MyTableDataTable = CType(MyBase.Clone,MyTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MyTableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT = Me.Columns("STT")
            Me.columnTenKh = Me.Columns("TenKh")
            Me.columnMaKH = Me.Columns("MaKH")
            Me.columnSoTB = Me.Columns("SoTB")
            Me.columnItem_No = Me.Columns("Item_No")
            Me.columnDiaChi = Me.Columns("DiaChi")
            Me.columnNoTruoc = Me.Columns("NoTruoc")
            Me.columnDieuChinh = Me.Columns("DieuChinh")
            Me.columnPhatSinh = Me.Columns("PhatSinh")
            Me.columnThue = Me.Columns("Thue")
            Me.columnTongCuoc = Me.Columns("TongCuoc")
            Me.columnMaTram = Me.Columns("MaTram")
            Me.columnMaNV = Me.Columns("MaNV")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT = New DataColumn("STT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnTenKh = New DataColumn("TenKh", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenKh)
            Me.columnMaKH = New DataColumn("MaKH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaKH)
            Me.columnSoTB = New DataColumn("SoTB", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoTB)
            Me.columnItem_No = New DataColumn("Item_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItem_No)
            Me.columnDiaChi = New DataColumn("DiaChi", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaChi)
            Me.columnNoTruoc = New DataColumn("NoTruoc", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoTruoc)
            Me.columnDieuChinh = New DataColumn("DieuChinh", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDieuChinh)
            Me.columnPhatSinh = New DataColumn("PhatSinh", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhatSinh)
            Me.columnThue = New DataColumn("Thue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThue)
            Me.columnTongCuoc = New DataColumn("TongCuoc", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTongCuoc)
            Me.columnMaTram = New DataColumn("MaTram", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaTram)
            Me.columnMaNV = New DataColumn("MaNV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaNV)
        End Sub
        
        Public Function NewMyTableRow() As MyTableRow
            Return CType(Me.NewRow,MyTableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MyTableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MyTableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MyTableRowChangedEvent) Is Nothing) Then
                RaiseEvent MyTableRowChanged(Me, New MyTableRowChangeEvent(CType(e.Row,MyTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MyTableRowChangingEvent) Is Nothing) Then
                RaiseEvent MyTableRowChanging(Me, New MyTableRowChangeEvent(CType(e.Row,MyTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MyTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent MyTableRowDeleted(Me, New MyTableRowChangeEvent(CType(e.Row,MyTableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MyTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent MyTableRowDeleting(Me, New MyTableRowChangeEvent(CType(e.Row,MyTableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMyTableRow(ByVal row As MyTableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MyTableRow
        Inherits DataRow
        
        Private tableMyTable As MyTableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMyTable = CType(Me.Table,MyTableDataTable)
        End Sub
        
        Public Property STT As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.STTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.STTColumn) = value
            End Set
        End Property
        
        Public Property TenKh As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.TenKhColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.TenKhColumn) = value
            End Set
        End Property
        
        Public Property MaKH As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.MaKHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.MaKHColumn) = value
            End Set
        End Property
        
        Public Property SoTB As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.SoTBColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.SoTBColumn) = value
            End Set
        End Property
        
        Public Property Item_No As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.Item_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.Item_NoColumn) = value
            End Set
        End Property
        
        Public Property DiaChi As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.DiaChiColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.DiaChiColumn) = value
            End Set
        End Property
        
        Public Property NoTruoc As Double
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.NoTruocColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.NoTruocColumn) = value
            End Set
        End Property
        
        Public Property DieuChinh As Double
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.DieuChinhColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.DieuChinhColumn) = value
            End Set
        End Property
        
        Public Property PhatSinh As Double
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.PhatSinhColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.PhatSinhColumn) = value
            End Set
        End Property
        
        Public Property Thue As Double
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.ThueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.ThueColumn) = value
            End Set
        End Property
        
        Public Property TongCuoc As Double
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.TongCuocColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.TongCuocColumn) = value
            End Set
        End Property
        
        Public Property MaTram As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.MaTramColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.MaTramColumn) = value
            End Set
        End Property
        
        Public Property MaNV As String
            Get
                Try 
                    Return CType(Me(Me.tableMyTable.MaNVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyTable.MaNVColumn) = value
            End Set
        End Property
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableMyTable.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTenKhNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.TenKhColumn)
        End Function
        
        Public Sub SetTenKhNull()
            Me(Me.tableMyTable.TenKhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaKHNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.MaKHColumn)
        End Function
        
        Public Sub SetMaKHNull()
            Me(Me.tableMyTable.MaKHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoTBNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.SoTBColumn)
        End Function
        
        Public Sub SetSoTBNull()
            Me(Me.tableMyTable.SoTBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItem_NoNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.Item_NoColumn)
        End Function
        
        Public Sub SetItem_NoNull()
            Me(Me.tableMyTable.Item_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiaChiNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.DiaChiColumn)
        End Function
        
        Public Sub SetDiaChiNull()
            Me(Me.tableMyTable.DiaChiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoTruocNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.NoTruocColumn)
        End Function
        
        Public Sub SetNoTruocNull()
            Me(Me.tableMyTable.NoTruocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDieuChinhNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.DieuChinhColumn)
        End Function
        
        Public Sub SetDieuChinhNull()
            Me(Me.tableMyTable.DieuChinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhatSinhNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.PhatSinhColumn)
        End Function
        
        Public Sub SetPhatSinhNull()
            Me(Me.tableMyTable.PhatSinhColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThueNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.ThueColumn)
        End Function
        
        Public Sub SetThueNull()
            Me(Me.tableMyTable.ThueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTongCuocNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.TongCuocColumn)
        End Function
        
        Public Sub SetTongCuocNull()
            Me(Me.tableMyTable.TongCuocColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaTramNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.MaTramColumn)
        End Function
        
        Public Sub SetMaTramNull()
            Me(Me.tableMyTable.MaTramColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaNVNull() As Boolean
            Return Me.IsNull(Me.tableMyTable.MaNVColumn)
        End Function
        
        Public Sub SetMaNVNull()
            Me(Me.tableMyTable.MaNVColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MyTableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MyTableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MyTableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MyTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SoLieuBaoCaoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTT As DataColumn
        
        Private columnSoHD As DataColumn
        
        Private columnMaKH As DataColumn
        
        Private columnSoTB As DataColumn
        
        Private columnTenKH As DataColumn
        
        Private columnTuNgay As DataColumn
        
        Private columnDenNgay As DataColumn
        
        Private columnSoTienTra As DataColumn
        
        Private columnNgayTra As DataColumn
        
        Private columnMaTram As DataColumn
        
        Private columnMaNV As DataColumn
        
        Friend Sub New()
            MyBase.New("SoLieuBaoCao")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STTColumn As DataColumn
            Get
                Return Me.columnSTT
            End Get
        End Property
        
        Friend ReadOnly Property SoHDColumn As DataColumn
            Get
                Return Me.columnSoHD
            End Get
        End Property
        
        Friend ReadOnly Property MaKHColumn As DataColumn
            Get
                Return Me.columnMaKH
            End Get
        End Property
        
        Friend ReadOnly Property SoTBColumn As DataColumn
            Get
                Return Me.columnSoTB
            End Get
        End Property
        
        Friend ReadOnly Property TenKHColumn As DataColumn
            Get
                Return Me.columnTenKH
            End Get
        End Property
        
        Friend ReadOnly Property TuNgayColumn As DataColumn
            Get
                Return Me.columnTuNgay
            End Get
        End Property
        
        Friend ReadOnly Property DenNgayColumn As DataColumn
            Get
                Return Me.columnDenNgay
            End Get
        End Property
        
        Friend ReadOnly Property SoTienTraColumn As DataColumn
            Get
                Return Me.columnSoTienTra
            End Get
        End Property
        
        Friend ReadOnly Property NgayTraColumn As DataColumn
            Get
                Return Me.columnNgayTra
            End Get
        End Property
        
        Friend ReadOnly Property MaTramColumn As DataColumn
            Get
                Return Me.columnMaTram
            End Get
        End Property
        
        Friend ReadOnly Property MaNVColumn As DataColumn
            Get
                Return Me.columnMaNV
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SoLieuBaoCaoRow
            Get
                Return CType(Me.Rows(index),SoLieuBaoCaoRow)
            End Get
        End Property
        
        Public Event SoLieuBaoCaoRowChanged As SoLieuBaoCaoRowChangeEventHandler
        
        Public Event SoLieuBaoCaoRowChanging As SoLieuBaoCaoRowChangeEventHandler
        
        Public Event SoLieuBaoCaoRowDeleted As SoLieuBaoCaoRowChangeEventHandler
        
        Public Event SoLieuBaoCaoRowDeleting As SoLieuBaoCaoRowChangeEventHandler
        
        Public Overloads Sub AddSoLieuBaoCaoRow(ByVal row As SoLieuBaoCaoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSoLieuBaoCaoRow(ByVal STT As String, ByVal SoHD As String, ByVal MaKH As String, ByVal SoTB As String, ByVal TenKH As String, ByVal TuNgay As Date, ByVal DenNgay As Date, ByVal SoTienTra As Double, ByVal NgayTra As Date, ByVal MaTram As String, ByVal MaNV As String) As SoLieuBaoCaoRow
            Dim rowSoLieuBaoCaoRow As SoLieuBaoCaoRow = CType(Me.NewRow,SoLieuBaoCaoRow)
            rowSoLieuBaoCaoRow.ItemArray = New Object() {STT, SoHD, MaKH, SoTB, TenKH, TuNgay, DenNgay, SoTienTra, NgayTra, MaTram, MaNV}
            Me.Rows.Add(rowSoLieuBaoCaoRow)
            Return rowSoLieuBaoCaoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SoLieuBaoCaoDataTable = CType(MyBase.Clone,SoLieuBaoCaoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SoLieuBaoCaoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTT = Me.Columns("STT")
            Me.columnSoHD = Me.Columns("SoHD")
            Me.columnMaKH = Me.Columns("MaKH")
            Me.columnSoTB = Me.Columns("SoTB")
            Me.columnTenKH = Me.Columns("TenKH")
            Me.columnTuNgay = Me.Columns("TuNgay")
            Me.columnDenNgay = Me.Columns("DenNgay")
            Me.columnSoTienTra = Me.Columns("SoTienTra")
            Me.columnNgayTra = Me.Columns("NgayTra")
            Me.columnMaTram = Me.Columns("MaTram")
            Me.columnMaNV = Me.Columns("MaNV")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTT = New DataColumn("STT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTT)
            Me.columnSoHD = New DataColumn("SoHD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoHD)
            Me.columnMaKH = New DataColumn("MaKH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaKH)
            Me.columnSoTB = New DataColumn("SoTB", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoTB)
            Me.columnTenKH = New DataColumn("TenKH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTenKH)
            Me.columnTuNgay = New DataColumn("TuNgay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTuNgay)
            Me.columnDenNgay = New DataColumn("DenNgay", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDenNgay)
            Me.columnSoTienTra = New DataColumn("SoTienTra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoTienTra)
            Me.columnNgayTra = New DataColumn("NgayTra", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgayTra)
            Me.columnMaTram = New DataColumn("MaTram", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaTram)
            Me.columnMaNV = New DataColumn("MaNV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaNV)
        End Sub
        
        Public Function NewSoLieuBaoCaoRow() As SoLieuBaoCaoRow
            Return CType(Me.NewRow,SoLieuBaoCaoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SoLieuBaoCaoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SoLieuBaoCaoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SoLieuBaoCaoRowChangedEvent) Is Nothing) Then
                RaiseEvent SoLieuBaoCaoRowChanged(Me, New SoLieuBaoCaoRowChangeEvent(CType(e.Row,SoLieuBaoCaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SoLieuBaoCaoRowChangingEvent) Is Nothing) Then
                RaiseEvent SoLieuBaoCaoRowChanging(Me, New SoLieuBaoCaoRowChangeEvent(CType(e.Row,SoLieuBaoCaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SoLieuBaoCaoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SoLieuBaoCaoRowDeleted(Me, New SoLieuBaoCaoRowChangeEvent(CType(e.Row,SoLieuBaoCaoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SoLieuBaoCaoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SoLieuBaoCaoRowDeleting(Me, New SoLieuBaoCaoRowChangeEvent(CType(e.Row,SoLieuBaoCaoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSoLieuBaoCaoRow(ByVal row As SoLieuBaoCaoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SoLieuBaoCaoRow
        Inherits DataRow
        
        Private tableSoLieuBaoCao As SoLieuBaoCaoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSoLieuBaoCao = CType(Me.Table,SoLieuBaoCaoDataTable)
        End Sub
        
        Public Property STT As String
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.STTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.STTColumn) = value
            End Set
        End Property
        
        Public Property SoHD As String
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.SoHDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.SoHDColumn) = value
            End Set
        End Property
        
        Public Property MaKH As String
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.MaKHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.MaKHColumn) = value
            End Set
        End Property
        
        Public Property SoTB As String
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.SoTBColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.SoTBColumn) = value
            End Set
        End Property
        
        Public Property TenKH As String
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.TenKHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.TenKHColumn) = value
            End Set
        End Property
        
        Public Property TuNgay As Date
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.TuNgayColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.TuNgayColumn) = value
            End Set
        End Property
        
        Public Property DenNgay As Date
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.DenNgayColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.DenNgayColumn) = value
            End Set
        End Property
        
        Public Property SoTienTra As Double
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.SoTienTraColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.SoTienTraColumn) = value
            End Set
        End Property
        
        Public Property NgayTra As Date
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.NgayTraColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.NgayTraColumn) = value
            End Set
        End Property
        
        Public Property MaTram As String
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.MaTramColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.MaTramColumn) = value
            End Set
        End Property
        
        Public Property MaNV As String
            Get
                Try 
                    Return CType(Me(Me.tableSoLieuBaoCao.MaNVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSoLieuBaoCao.MaNVColumn) = value
            End Set
        End Property
        
        Public Function IsSTTNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.STTColumn)
        End Function
        
        Public Sub SetSTTNull()
            Me(Me.tableSoLieuBaoCao.STTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoHDNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.SoHDColumn)
        End Function
        
        Public Sub SetSoHDNull()
            Me(Me.tableSoLieuBaoCao.SoHDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaKHNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.MaKHColumn)
        End Function
        
        Public Sub SetMaKHNull()
            Me(Me.tableSoLieuBaoCao.MaKHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoTBNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.SoTBColumn)
        End Function
        
        Public Sub SetSoTBNull()
            Me(Me.tableSoLieuBaoCao.SoTBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTenKHNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.TenKHColumn)
        End Function
        
        Public Sub SetTenKHNull()
            Me(Me.tableSoLieuBaoCao.TenKHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTuNgayNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.TuNgayColumn)
        End Function
        
        Public Sub SetTuNgayNull()
            Me(Me.tableSoLieuBaoCao.TuNgayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDenNgayNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.DenNgayColumn)
        End Function
        
        Public Sub SetDenNgayNull()
            Me(Me.tableSoLieuBaoCao.DenNgayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoTienTraNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.SoTienTraColumn)
        End Function
        
        Public Sub SetSoTienTraNull()
            Me(Me.tableSoLieuBaoCao.SoTienTraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgayTraNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.NgayTraColumn)
        End Function
        
        Public Sub SetNgayTraNull()
            Me(Me.tableSoLieuBaoCao.NgayTraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaTramNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.MaTramColumn)
        End Function
        
        Public Sub SetMaTramNull()
            Me(Me.tableSoLieuBaoCao.MaTramColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaNVNull() As Boolean
            Return Me.IsNull(Me.tableSoLieuBaoCao.MaNVColumn)
        End Function
        
        Public Sub SetMaNVNull()
            Me(Me.tableSoLieuBaoCao.MaNVColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SoLieuBaoCaoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SoLieuBaoCaoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SoLieuBaoCaoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SoLieuBaoCaoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
