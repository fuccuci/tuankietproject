'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsReceiptsDetail
    Inherits DataSet
    
    Private tableqryCountry As qryCountryDataTable
    
    Private tableqryNgay As qryNgayDataTable
    
    Private tableqryReceiptsDetail As qryReceiptsDetailDataTable
    
    Private tableqryPSTNDLReceiptsDetail As qryPSTNDLReceiptsDetailDataTable
    
    Private tableqryReceiptsDetailByService As qryReceiptsDetailByServiceDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("qryCountry")) Is Nothing) Then
                Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
            End If
            If (Not (ds.Tables("qryNgay")) Is Nothing) Then
                Me.Tables.Add(New qryNgayDataTable(ds.Tables("qryNgay")))
            End If
            If (Not (ds.Tables("qryReceiptsDetail")) Is Nothing) Then
                Me.Tables.Add(New qryReceiptsDetailDataTable(ds.Tables("qryReceiptsDetail")))
            End If
            If (Not (ds.Tables("qryPSTNDLReceiptsDetail")) Is Nothing) Then
                Me.Tables.Add(New qryPSTNDLReceiptsDetailDataTable(ds.Tables("qryPSTNDLReceiptsDetail")))
            End If
            If (Not (ds.Tables("qryReceiptsDetailByService")) Is Nothing) Then
                Me.Tables.Add(New qryReceiptsDetailByServiceDataTable(ds.Tables("qryReceiptsDetailByService")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryCountry As qryCountryDataTable
        Get
            Return Me.tableqryCountry
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryNgay As qryNgayDataTable
        Get
            Return Me.tableqryNgay
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryReceiptsDetail As qryReceiptsDetailDataTable
        Get
            Return Me.tableqryReceiptsDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryPSTNDLReceiptsDetail As qryPSTNDLReceiptsDetailDataTable
        Get
            Return Me.tableqryPSTNDLReceiptsDetail
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryReceiptsDetailByService As qryReceiptsDetailByServiceDataTable
        Get
            Return Me.tableqryReceiptsDetailByService
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsReceiptsDetail = CType(MyBase.Clone,DsReceiptsDetail)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("qryCountry")) Is Nothing) Then
            Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
        End If
        If (Not (ds.Tables("qryNgay")) Is Nothing) Then
            Me.Tables.Add(New qryNgayDataTable(ds.Tables("qryNgay")))
        End If
        If (Not (ds.Tables("qryReceiptsDetail")) Is Nothing) Then
            Me.Tables.Add(New qryReceiptsDetailDataTable(ds.Tables("qryReceiptsDetail")))
        End If
        If (Not (ds.Tables("qryPSTNDLReceiptsDetail")) Is Nothing) Then
            Me.Tables.Add(New qryPSTNDLReceiptsDetailDataTable(ds.Tables("qryPSTNDLReceiptsDetail")))
        End If
        If (Not (ds.Tables("qryReceiptsDetailByService")) Is Nothing) Then
            Me.Tables.Add(New qryReceiptsDetailByServiceDataTable(ds.Tables("qryReceiptsDetailByService")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableqryCountry = CType(Me.Tables("qryCountry"),qryCountryDataTable)
        If (Not (Me.tableqryCountry) Is Nothing) Then
            Me.tableqryCountry.InitVars
        End If
        Me.tableqryNgay = CType(Me.Tables("qryNgay"),qryNgayDataTable)
        If (Not (Me.tableqryNgay) Is Nothing) Then
            Me.tableqryNgay.InitVars
        End If
        Me.tableqryReceiptsDetail = CType(Me.Tables("qryReceiptsDetail"),qryReceiptsDetailDataTable)
        If (Not (Me.tableqryReceiptsDetail) Is Nothing) Then
            Me.tableqryReceiptsDetail.InitVars
        End If
        Me.tableqryPSTNDLReceiptsDetail = CType(Me.Tables("qryPSTNDLReceiptsDetail"),qryPSTNDLReceiptsDetailDataTable)
        If (Not (Me.tableqryPSTNDLReceiptsDetail) Is Nothing) Then
            Me.tableqryPSTNDLReceiptsDetail.InitVars
        End If
        Me.tableqryReceiptsDetailByService = CType(Me.Tables("qryReceiptsDetailByService"),qryReceiptsDetailByServiceDataTable)
        If (Not (Me.tableqryReceiptsDetailByService) Is Nothing) Then
            Me.tableqryReceiptsDetailByService.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsReceiptsDetail"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsReceiptsDetail.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableqryCountry = New qryCountryDataTable
        Me.Tables.Add(Me.tableqryCountry)
        Me.tableqryNgay = New qryNgayDataTable
        Me.Tables.Add(Me.tableqryNgay)
        Me.tableqryReceiptsDetail = New qryReceiptsDetailDataTable
        Me.Tables.Add(Me.tableqryReceiptsDetail)
        Me.tableqryPSTNDLReceiptsDetail = New qryPSTNDLReceiptsDetailDataTable
        Me.Tables.Add(Me.tableqryPSTNDLReceiptsDetail)
        Me.tableqryReceiptsDetailByService = New qryReceiptsDetailByServiceDataTable
        Me.Tables.Add(Me.tableqryReceiptsDetailByService)
    End Sub
    
    Private Function ShouldSerializeqryCountry() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryNgay() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryReceiptsDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryPSTNDLReceiptsDetail() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryReceiptsDetailByService() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub qryCountryRowChangeEventHandler(ByVal sender As Object, ByVal e As qryCountryRowChangeEvent)
    
    Public Delegate Sub qryNgayRowChangeEventHandler(ByVal sender As Object, ByVal e As qryNgayRowChangeEvent)
    
    Public Delegate Sub qryReceiptsDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As qryReceiptsDetailRowChangeEvent)
    
    Public Delegate Sub qryPSTNDLReceiptsDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As qryPSTNDLReceiptsDetailRowChangeEvent)
    
    Public Delegate Sub qryReceiptsDetailByServiceRowChangeEventHandler(ByVal sender As Object, ByVal e As qryReceiptsDetailByServiceRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCountryName As DataColumn
        
        Private columnStationName As DataColumn
        
        Friend Sub New()
            MyBase.New("qryCountry")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CountryNameColumn As DataColumn
            Get
                Return Me.columnCountryName
            End Get
        End Property
        
        Friend ReadOnly Property StationNameColumn As DataColumn
            Get
                Return Me.columnStationName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryCountryRow
            Get
                Return CType(Me.Rows(index),qryCountryRow)
            End Get
        End Property
        
        Public Event qryCountryRowChanged As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowChanging As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleted As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleting As qryCountryRowChangeEventHandler
        
        Public Overloads Sub AddqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryCountryRow(ByVal CountryName As String, ByVal StationName As String) As qryCountryRow
            Dim rowqryCountryRow As qryCountryRow = CType(Me.NewRow,qryCountryRow)
            rowqryCountryRow.ItemArray = New Object() {CountryName, StationName}
            Me.Rows.Add(rowqryCountryRow)
            Return rowqryCountryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryCountryDataTable = CType(MyBase.Clone,qryCountryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryCountryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCountryName = Me.Columns("CountryName")
            Me.columnStationName = Me.Columns("StationName")
        End Sub
        
        Private Sub InitClass()
            Me.columnCountryName = New DataColumn("CountryName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryName)
            Me.columnStationName = New DataColumn("StationName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStationName)
        End Sub
        
        Public Function NewqryCountryRow() As qryCountryRow
            Return CType(Me.NewRow,qryCountryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryCountryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryCountryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryCountryRowChangedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanged(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryCountryRowChangingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanging(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryCountryRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleted(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryCountryRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleting(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRow
        Inherits DataRow
        
        Private tableqryCountry As qryCountryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryCountry = CType(Me.Table,qryCountryDataTable)
        End Sub
        
        Public Property CountryName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.CountryNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.CountryNameColumn) = value
            End Set
        End Property
        
        Public Property StationName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.StationNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.StationNameColumn) = value
            End Set
        End Property
        
        Public Function IsCountryNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.CountryNameColumn)
        End Function
        
        Public Sub SetCountryNameNull()
            Me(Me.tableqryCountry.CountryNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStationNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.StationNameColumn)
        End Function
        
        Public Sub SetStationNameNull()
            Me(Me.tableqryCountry.StationNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryCountryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryCountryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryCountryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfromDate As DataColumn
        
        Private columntoDate As DataColumn
        
        Private columnService_Code As DataColumn
        
        Friend Sub New()
            MyBase.New("qryNgay")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fromDateColumn As DataColumn
            Get
                Return Me.columnfromDate
            End Get
        End Property
        
        Friend ReadOnly Property toDateColumn As DataColumn
            Get
                Return Me.columntoDate
            End Get
        End Property
        
        Friend ReadOnly Property Service_CodeColumn As DataColumn
            Get
                Return Me.columnService_Code
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryNgayRow
            Get
                Return CType(Me.Rows(index),qryNgayRow)
            End Get
        End Property
        
        Public Event qryNgayRowChanged As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowChanging As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowDeleted As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowDeleting As qryNgayRowChangeEventHandler
        
        Public Overloads Sub AddqryNgayRow(ByVal row As qryNgayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryNgayRow(ByVal fromDate As Date, ByVal toDate As Date, ByVal Service_Code As String) As qryNgayRow
            Dim rowqryNgayRow As qryNgayRow = CType(Me.NewRow,qryNgayRow)
            rowqryNgayRow.ItemArray = New Object() {fromDate, toDate, Service_Code}
            Me.Rows.Add(rowqryNgayRow)
            Return rowqryNgayRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryNgayDataTable = CType(MyBase.Clone,qryNgayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryNgayDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfromDate = Me.Columns("fromDate")
            Me.columntoDate = Me.Columns("toDate")
            Me.columnService_Code = Me.Columns("Service_Code")
        End Sub
        
        Private Sub InitClass()
            Me.columnfromDate = New DataColumn("fromDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromDate)
            Me.columntoDate = New DataColumn("toDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntoDate)
            Me.columnService_Code = New DataColumn("Service_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Code)
        End Sub
        
        Public Function NewqryNgayRow() As qryNgayRow
            Return CType(Me.NewRow,qryNgayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryNgayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryNgayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryNgayRowChangedEvent) Is Nothing) Then
                RaiseEvent qryNgayRowChanged(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryNgayRowChangingEvent) Is Nothing) Then
                RaiseEvent qryNgayRowChanging(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryNgayRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryNgayRowDeleted(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryNgayRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryNgayRowDeleting(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryNgayRow(ByVal row As qryNgayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayRow
        Inherits DataRow
        
        Private tableqryNgay As qryNgayDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryNgay = CType(Me.Table,qryNgayDataTable)
        End Sub
        
        Public Property fromDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryNgay.fromDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNgay.fromDateColumn) = value
            End Set
        End Property
        
        Public Property toDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryNgay.toDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNgay.toDateColumn) = value
            End Set
        End Property
        
        Public Property Service_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryNgay.Service_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNgay.Service_CodeColumn) = value
            End Set
        End Property
        
        Public Function IsfromDateNull() As Boolean
            Return Me.IsNull(Me.tableqryNgay.fromDateColumn)
        End Function
        
        Public Sub SetfromDateNull()
            Me(Me.tableqryNgay.fromDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstoDateNull() As Boolean
            Return Me.IsNull(Me.tableqryNgay.toDateColumn)
        End Function
        
        Public Sub SettoDateNull()
            Me(Me.tableqryNgay.toDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsService_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryNgay.Service_CodeColumn)
        End Function
        
        Public Sub SetService_CodeNull()
            Me(Me.tableqryNgay.Service_CodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryNgayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryNgayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryNgayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryReceiptsDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRecei_Date As DataColumn
        
        Private columnRecei_No As DataColumn
        
        Private columnCharge_Cycle As DataColumn
        
        Private columnRecei_Money098 As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnService_Code As DataColumn
        
        Private columnInvoice_Quantity098 As DataColumn
        
        Private columnInvoice_Quantity178 As DataColumn
        
        Private columnRecei_Money178 As DataColumn
        
        Private columnInvoice_QuantityPSTN As DataColumn
        
        Private columnRecei_MoneyPSTN As DataColumn
        
        Private columnInvoice_QuantityADSL As DataColumn
        
        Private columnRecei_MoneyADSL As DataColumn
        
        Private columnInvoice_QuantityPSTNDL As DataColumn
        
        Private columnRecei_MoneyPSTNDL As DataColumn
        
        Private columnAccount_No As DataColumn
        
        Private columnMaLoaiThu As DataColumn
        
        Friend Sub New()
            MyBase.New("qryReceiptsDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Recei_DateColumn As DataColumn
            Get
                Return Me.columnRecei_Date
            End Get
        End Property
        
        Friend ReadOnly Property Recei_NoColumn As DataColumn
            Get
                Return Me.columnRecei_No
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CycleColumn As DataColumn
            Get
                Return Me.columnCharge_Cycle
            End Get
        End Property
        
        Friend ReadOnly Property Recei_Money098Column As DataColumn
            Get
                Return Me.columnRecei_Money098
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property Service_CodeColumn As DataColumn
            Get
                Return Me.columnService_Code
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_Quantity098Column As DataColumn
            Get
                Return Me.columnInvoice_Quantity098
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_Quantity178Column As DataColumn
            Get
                Return Me.columnInvoice_Quantity178
            End Get
        End Property
        
        Friend ReadOnly Property Recei_Money178Column As DataColumn
            Get
                Return Me.columnRecei_Money178
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityPSTNColumn As DataColumn
            Get
                Return Me.columnInvoice_QuantityPSTN
            End Get
        End Property
        
        Friend ReadOnly Property Recei_MoneyPSTNColumn As DataColumn
            Get
                Return Me.columnRecei_MoneyPSTN
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityADSLColumn As DataColumn
            Get
                Return Me.columnInvoice_QuantityADSL
            End Get
        End Property
        
        Friend ReadOnly Property Recei_MoneyADSLColumn As DataColumn
            Get
                Return Me.columnRecei_MoneyADSL
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityPSTNDLColumn As DataColumn
            Get
                Return Me.columnInvoice_QuantityPSTNDL
            End Get
        End Property
        
        Friend ReadOnly Property Recei_MoneyPSTNDLColumn As DataColumn
            Get
                Return Me.columnRecei_MoneyPSTNDL
            End Get
        End Property
        
        Friend ReadOnly Property Account_NoColumn As DataColumn
            Get
                Return Me.columnAccount_No
            End Get
        End Property
        
        Friend ReadOnly Property MaLoaiThuColumn As DataColumn
            Get
                Return Me.columnMaLoaiThu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryReceiptsDetailRow
            Get
                Return CType(Me.Rows(index),qryReceiptsDetailRow)
            End Get
        End Property
        
        Public Event qryReceiptsDetailRowChanged As qryReceiptsDetailRowChangeEventHandler
        
        Public Event qryReceiptsDetailRowChanging As qryReceiptsDetailRowChangeEventHandler
        
        Public Event qryReceiptsDetailRowDeleted As qryReceiptsDetailRowChangeEventHandler
        
        Public Event qryReceiptsDetailRowDeleting As qryReceiptsDetailRowChangeEventHandler
        
        Public Overloads Sub AddqryReceiptsDetailRow(ByVal row As qryReceiptsDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryReceiptsDetailRow( _
                    ByVal Recei_Date As Date,  _
                    ByVal Recei_No As Long,  _
                    ByVal Charge_Cycle As String,  _
                    ByVal Recei_Money098 As Double,  _
                    ByVal Employ_Code As String,  _
                    ByVal Service_Code As String,  _
                    ByVal Invoice_Quantity098 As Integer,  _
                    ByVal Invoice_Quantity178 As Integer,  _
                    ByVal Recei_Money178 As Double,  _
                    ByVal Invoice_QuantityPSTN As Integer,  _
                    ByVal Recei_MoneyPSTN As Double,  _
                    ByVal Invoice_QuantityADSL As Integer,  _
                    ByVal Recei_MoneyADSL As Double,  _
                    ByVal Invoice_QuantityPSTNDL As Integer,  _
                    ByVal Recei_MoneyPSTNDL As Double,  _
                    ByVal Account_No As String,  _
                    ByVal MaLoaiThu As String) As qryReceiptsDetailRow
            Dim rowqryReceiptsDetailRow As qryReceiptsDetailRow = CType(Me.NewRow,qryReceiptsDetailRow)
            rowqryReceiptsDetailRow.ItemArray = New Object() {Recei_Date, Recei_No, Charge_Cycle, Recei_Money098, Employ_Code, Service_Code, Invoice_Quantity098, Invoice_Quantity178, Recei_Money178, Invoice_QuantityPSTN, Recei_MoneyPSTN, Invoice_QuantityADSL, Recei_MoneyADSL, Invoice_QuantityPSTNDL, Recei_MoneyPSTNDL, Account_No, MaLoaiThu}
            Me.Rows.Add(rowqryReceiptsDetailRow)
            Return rowqryReceiptsDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryReceiptsDetailDataTable = CType(MyBase.Clone,qryReceiptsDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryReceiptsDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRecei_Date = Me.Columns("Recei_Date")
            Me.columnRecei_No = Me.Columns("Recei_No")
            Me.columnCharge_Cycle = Me.Columns("Charge_Cycle")
            Me.columnRecei_Money098 = Me.Columns("Recei_Money098")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnService_Code = Me.Columns("Service_Code")
            Me.columnInvoice_Quantity098 = Me.Columns("Invoice_Quantity098")
            Me.columnInvoice_Quantity178 = Me.Columns("Invoice_Quantity178")
            Me.columnRecei_Money178 = Me.Columns("Recei_Money178")
            Me.columnInvoice_QuantityPSTN = Me.Columns("Invoice_QuantityPSTN")
            Me.columnRecei_MoneyPSTN = Me.Columns("Recei_MoneyPSTN")
            Me.columnInvoice_QuantityADSL = Me.Columns("Invoice_QuantityADSL")
            Me.columnRecei_MoneyADSL = Me.Columns("Recei_MoneyADSL")
            Me.columnInvoice_QuantityPSTNDL = Me.Columns("Invoice_QuantityPSTNDL")
            Me.columnRecei_MoneyPSTNDL = Me.Columns("Recei_MoneyPSTNDL")
            Me.columnAccount_No = Me.Columns("Account_No")
            Me.columnMaLoaiThu = Me.Columns("MaLoaiThu")
        End Sub
        
        Private Sub InitClass()
            Me.columnRecei_Date = New DataColumn("Recei_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Date)
            Me.columnRecei_No = New DataColumn("Recei_No", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_No)
            Me.columnCharge_Cycle = New DataColumn("Charge_Cycle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Cycle)
            Me.columnRecei_Money098 = New DataColumn("Recei_Money098", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Money098)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnService_Code = New DataColumn("Service_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Code)
            Me.columnInvoice_Quantity098 = New DataColumn("Invoice_Quantity098", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Quantity098)
            Me.columnInvoice_Quantity178 = New DataColumn("Invoice_Quantity178", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Quantity178)
            Me.columnRecei_Money178 = New DataColumn("Recei_Money178", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Money178)
            Me.columnInvoice_QuantityPSTN = New DataColumn("Invoice_QuantityPSTN", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_QuantityPSTN)
            Me.columnRecei_MoneyPSTN = New DataColumn("Recei_MoneyPSTN", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_MoneyPSTN)
            Me.columnInvoice_QuantityADSL = New DataColumn("Invoice_QuantityADSL", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_QuantityADSL)
            Me.columnRecei_MoneyADSL = New DataColumn("Recei_MoneyADSL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_MoneyADSL)
            Me.columnInvoice_QuantityPSTNDL = New DataColumn("Invoice_QuantityPSTNDL", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_QuantityPSTNDL)
            Me.columnRecei_MoneyPSTNDL = New DataColumn("Recei_MoneyPSTNDL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_MoneyPSTNDL)
            Me.columnAccount_No = New DataColumn("Account_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccount_No)
            Me.columnMaLoaiThu = New DataColumn("MaLoaiThu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaLoaiThu)
        End Sub
        
        Public Function NewqryReceiptsDetailRow() As qryReceiptsDetailRow
            Return CType(Me.NewRow,qryReceiptsDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryReceiptsDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryReceiptsDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryReceiptsDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailRowChanged(Me, New qryReceiptsDetailRowChangeEvent(CType(e.Row,qryReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryReceiptsDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailRowChanging(Me, New qryReceiptsDetailRowChangeEvent(CType(e.Row,qryReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryReceiptsDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailRowDeleted(Me, New qryReceiptsDetailRowChangeEvent(CType(e.Row,qryReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryReceiptsDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailRowDeleting(Me, New qryReceiptsDetailRowChangeEvent(CType(e.Row,qryReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryReceiptsDetailRow(ByVal row As qryReceiptsDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryReceiptsDetailRow
        Inherits DataRow
        
        Private tableqryReceiptsDetail As qryReceiptsDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryReceiptsDetail = CType(Me.Table,qryReceiptsDetailDataTable)
        End Sub
        
        Public Property Recei_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Recei_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Recei_DateColumn) = value
            End Set
        End Property
        
        Public Property Recei_No As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Recei_NoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Recei_NoColumn) = value
            End Set
        End Property
        
        Public Property Charge_Cycle As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Charge_CycleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Charge_CycleColumn) = value
            End Set
        End Property
        
        Public Property Recei_Money098 As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Recei_Money098Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Recei_Money098Column) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property Service_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Service_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Service_CodeColumn) = value
            End Set
        End Property
        
        Public Property Invoice_Quantity098 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Invoice_Quantity098Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Invoice_Quantity098Column) = value
            End Set
        End Property
        
        Public Property Invoice_Quantity178 As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Invoice_Quantity178Column),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Invoice_Quantity178Column) = value
            End Set
        End Property
        
        Public Property Recei_Money178 As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Recei_Money178Column),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Recei_Money178Column) = value
            End Set
        End Property
        
        Public Property Invoice_QuantityPSTN As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNColumn) = value
            End Set
        End Property
        
        Public Property Recei_MoneyPSTN As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Recei_MoneyPSTNColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Recei_MoneyPSTNColumn) = value
            End Set
        End Property
        
        Public Property Invoice_QuantityADSL As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Invoice_QuantityADSLColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Invoice_QuantityADSLColumn) = value
            End Set
        End Property
        
        Public Property Recei_MoneyADSL As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Recei_MoneyADSLColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Recei_MoneyADSLColumn) = value
            End Set
        End Property
        
        Public Property Invoice_QuantityPSTNDL As Integer
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNDLColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNDLColumn) = value
            End Set
        End Property
        
        Public Property Recei_MoneyPSTNDL As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Recei_MoneyPSTNDLColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Recei_MoneyPSTNDLColumn) = value
            End Set
        End Property
        
        Public Property Account_No As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.Account_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.Account_NoColumn) = value
            End Set
        End Property
        
        Public Property MaLoaiThu As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetail.MaLoaiThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetail.MaLoaiThuColumn) = value
            End Set
        End Property
        
        Public Function IsRecei_DateNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Recei_DateColumn)
        End Function
        
        Public Sub SetRecei_DateNull()
            Me(Me.tableqryReceiptsDetail.Recei_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_NoNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Recei_NoColumn)
        End Function
        
        Public Sub SetRecei_NoNull()
            Me(Me.tableqryReceiptsDetail.Recei_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CycleNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Charge_CycleColumn)
        End Function
        
        Public Sub SetCharge_CycleNull()
            Me(Me.tableqryReceiptsDetail.Charge_CycleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_Money098Null() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Recei_Money098Column)
        End Function
        
        Public Sub SetRecei_Money098Null()
            Me(Me.tableqryReceiptsDetail.Recei_Money098Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableqryReceiptsDetail.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsService_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Service_CodeColumn)
        End Function
        
        Public Sub SetService_CodeNull()
            Me(Me.tableqryReceiptsDetail.Service_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_Quantity098Null() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Invoice_Quantity098Column)
        End Function
        
        Public Sub SetInvoice_Quantity098Null()
            Me(Me.tableqryReceiptsDetail.Invoice_Quantity098Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_Quantity178Null() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Invoice_Quantity178Column)
        End Function
        
        Public Sub SetInvoice_Quantity178Null()
            Me(Me.tableqryReceiptsDetail.Invoice_Quantity178Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_Money178Null() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Recei_Money178Column)
        End Function
        
        Public Sub SetRecei_Money178Null()
            Me(Me.tableqryReceiptsDetail.Recei_Money178Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityPSTNNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNColumn)
        End Function
        
        Public Sub SetInvoice_QuantityPSTNNull()
            Me(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_MoneyPSTNNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Recei_MoneyPSTNColumn)
        End Function
        
        Public Sub SetRecei_MoneyPSTNNull()
            Me(Me.tableqryReceiptsDetail.Recei_MoneyPSTNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityADSLNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Invoice_QuantityADSLColumn)
        End Function
        
        Public Sub SetInvoice_QuantityADSLNull()
            Me(Me.tableqryReceiptsDetail.Invoice_QuantityADSLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_MoneyADSLNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Recei_MoneyADSLColumn)
        End Function
        
        Public Sub SetRecei_MoneyADSLNull()
            Me(Me.tableqryReceiptsDetail.Recei_MoneyADSLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityPSTNDLNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNDLColumn)
        End Function
        
        Public Sub SetInvoice_QuantityPSTNDLNull()
            Me(Me.tableqryReceiptsDetail.Invoice_QuantityPSTNDLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_MoneyPSTNDLNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Recei_MoneyPSTNDLColumn)
        End Function
        
        Public Sub SetRecei_MoneyPSTNDLNull()
            Me(Me.tableqryReceiptsDetail.Recei_MoneyPSTNDLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccount_NoNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.Account_NoColumn)
        End Function
        
        Public Sub SetAccount_NoNull()
            Me(Me.tableqryReceiptsDetail.Account_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaLoaiThuNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetail.MaLoaiThuColumn)
        End Function
        
        Public Sub SetMaLoaiThuNull()
            Me(Me.tableqryReceiptsDetail.MaLoaiThuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryReceiptsDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryReceiptsDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryReceiptsDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryReceiptsDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryPSTNDLReceiptsDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRecei_Date As DataColumn
        
        Private columnRecei_NoDS As DataColumn
        
        Private columnRecei_NoTNDN As DataColumn
        
        Private columnExpen_No As DataColumn
        
        Private columnReceiMoneyDS As DataColumn
        
        Private columnReceiMoneyTNDN As DataColumn
        
        Private columnExpenMoneyHH As DataColumn
        
        Private columnAgentName As DataColumn
        
        Private columnCharge_Cycle As DataColumn
        
        Private columnISDN As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnRealRevenue As DataColumn
        
        Friend Sub New()
            MyBase.New("qryPSTNDLReceiptsDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Recei_DateColumn As DataColumn
            Get
                Return Me.columnRecei_Date
            End Get
        End Property
        
        Friend ReadOnly Property Recei_NoDSColumn As DataColumn
            Get
                Return Me.columnRecei_NoDS
            End Get
        End Property
        
        Friend ReadOnly Property Recei_NoTNDNColumn As DataColumn
            Get
                Return Me.columnRecei_NoTNDN
            End Get
        End Property
        
        Friend ReadOnly Property Expen_NoColumn As DataColumn
            Get
                Return Me.columnExpen_No
            End Get
        End Property
        
        Friend ReadOnly Property ReceiMoneyDSColumn As DataColumn
            Get
                Return Me.columnReceiMoneyDS
            End Get
        End Property
        
        Friend ReadOnly Property ReceiMoneyTNDNColumn As DataColumn
            Get
                Return Me.columnReceiMoneyTNDN
            End Get
        End Property
        
        Friend ReadOnly Property ExpenMoneyHHColumn As DataColumn
            Get
                Return Me.columnExpenMoneyHH
            End Get
        End Property
        
        Friend ReadOnly Property AgentNameColumn As DataColumn
            Get
                Return Me.columnAgentName
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CycleColumn As DataColumn
            Get
                Return Me.columnCharge_Cycle
            End Get
        End Property
        
        Friend ReadOnly Property ISDNColumn As DataColumn
            Get
                Return Me.columnISDN
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property RealRevenueColumn As DataColumn
            Get
                Return Me.columnRealRevenue
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryPSTNDLReceiptsDetailRow
            Get
                Return CType(Me.Rows(index),qryPSTNDLReceiptsDetailRow)
            End Get
        End Property
        
        Public Event qryPSTNDLReceiptsDetailRowChanged As qryPSTNDLReceiptsDetailRowChangeEventHandler
        
        Public Event qryPSTNDLReceiptsDetailRowChanging As qryPSTNDLReceiptsDetailRowChangeEventHandler
        
        Public Event qryPSTNDLReceiptsDetailRowDeleted As qryPSTNDLReceiptsDetailRowChangeEventHandler
        
        Public Event qryPSTNDLReceiptsDetailRowDeleting As qryPSTNDLReceiptsDetailRowChangeEventHandler
        
        Public Overloads Sub AddqryPSTNDLReceiptsDetailRow(ByVal row As qryPSTNDLReceiptsDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryPSTNDLReceiptsDetailRow(ByVal Recei_Date As Date, ByVal Recei_NoDS As Long, ByVal Recei_NoTNDN As Long, ByVal Expen_No As Long, ByVal ReceiMoneyDS As Double, ByVal ReceiMoneyTNDN As Double, ByVal ExpenMoneyHH As Double, ByVal AgentName As String, ByVal Charge_Cycle As String, ByVal ISDN As String, ByVal Employ_Code As String, ByVal RealRevenue As Double) As qryPSTNDLReceiptsDetailRow
            Dim rowqryPSTNDLReceiptsDetailRow As qryPSTNDLReceiptsDetailRow = CType(Me.NewRow,qryPSTNDLReceiptsDetailRow)
            rowqryPSTNDLReceiptsDetailRow.ItemArray = New Object() {Recei_Date, Recei_NoDS, Recei_NoTNDN, Expen_No, ReceiMoneyDS, ReceiMoneyTNDN, ExpenMoneyHH, AgentName, Charge_Cycle, ISDN, Employ_Code, RealRevenue}
            Me.Rows.Add(rowqryPSTNDLReceiptsDetailRow)
            Return rowqryPSTNDLReceiptsDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryPSTNDLReceiptsDetailDataTable = CType(MyBase.Clone,qryPSTNDLReceiptsDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryPSTNDLReceiptsDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRecei_Date = Me.Columns("Recei_Date")
            Me.columnRecei_NoDS = Me.Columns("Recei_NoDS")
            Me.columnRecei_NoTNDN = Me.Columns("Recei_NoTNDN")
            Me.columnExpen_No = Me.Columns("Expen_No")
            Me.columnReceiMoneyDS = Me.Columns("ReceiMoneyDS")
            Me.columnReceiMoneyTNDN = Me.Columns("ReceiMoneyTNDN")
            Me.columnExpenMoneyHH = Me.Columns("ExpenMoneyHH")
            Me.columnAgentName = Me.Columns("AgentName")
            Me.columnCharge_Cycle = Me.Columns("Charge_Cycle")
            Me.columnISDN = Me.Columns("ISDN")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnRealRevenue = Me.Columns("RealRevenue")
        End Sub
        
        Private Sub InitClass()
            Me.columnRecei_Date = New DataColumn("Recei_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Date)
            Me.columnRecei_NoDS = New DataColumn("Recei_NoDS", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_NoDS)
            Me.columnRecei_NoTNDN = New DataColumn("Recei_NoTNDN", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_NoTNDN)
            Me.columnExpen_No = New DataColumn("Expen_No", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpen_No)
            Me.columnReceiMoneyDS = New DataColumn("ReceiMoneyDS", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiMoneyDS)
            Me.columnReceiMoneyTNDN = New DataColumn("ReceiMoneyTNDN", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiMoneyTNDN)
            Me.columnExpenMoneyHH = New DataColumn("ExpenMoneyHH", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpenMoneyHH)
            Me.columnAgentName = New DataColumn("AgentName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgentName)
            Me.columnCharge_Cycle = New DataColumn("Charge_Cycle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Cycle)
            Me.columnISDN = New DataColumn("ISDN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISDN)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnRealRevenue = New DataColumn("RealRevenue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRealRevenue)
        End Sub
        
        Public Function NewqryPSTNDLReceiptsDetailRow() As qryPSTNDLReceiptsDetailRow
            Return CType(Me.NewRow,qryPSTNDLReceiptsDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryPSTNDLReceiptsDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryPSTNDLReceiptsDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryPSTNDLReceiptsDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent qryPSTNDLReceiptsDetailRowChanged(Me, New qryPSTNDLReceiptsDetailRowChangeEvent(CType(e.Row,qryPSTNDLReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryPSTNDLReceiptsDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent qryPSTNDLReceiptsDetailRowChanging(Me, New qryPSTNDLReceiptsDetailRowChangeEvent(CType(e.Row,qryPSTNDLReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryPSTNDLReceiptsDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryPSTNDLReceiptsDetailRowDeleted(Me, New qryPSTNDLReceiptsDetailRowChangeEvent(CType(e.Row,qryPSTNDLReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryPSTNDLReceiptsDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryPSTNDLReceiptsDetailRowDeleting(Me, New qryPSTNDLReceiptsDetailRowChangeEvent(CType(e.Row,qryPSTNDLReceiptsDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryPSTNDLReceiptsDetailRow(ByVal row As qryPSTNDLReceiptsDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryPSTNDLReceiptsDetailRow
        Inherits DataRow
        
        Private tableqryPSTNDLReceiptsDetail As qryPSTNDLReceiptsDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryPSTNDLReceiptsDetail = CType(Me.Table,qryPSTNDLReceiptsDetailDataTable)
        End Sub
        
        Public Property Recei_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.Recei_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.Recei_DateColumn) = value
            End Set
        End Property
        
        Public Property Recei_NoDS As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.Recei_NoDSColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.Recei_NoDSColumn) = value
            End Set
        End Property
        
        Public Property Recei_NoTNDN As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.Recei_NoTNDNColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.Recei_NoTNDNColumn) = value
            End Set
        End Property
        
        Public Property Expen_No As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.Expen_NoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.Expen_NoColumn) = value
            End Set
        End Property
        
        Public Property ReceiMoneyDS As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyDSColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyDSColumn) = value
            End Set
        End Property
        
        Public Property ReceiMoneyTNDN As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyTNDNColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyTNDNColumn) = value
            End Set
        End Property
        
        Public Property ExpenMoneyHH As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.ExpenMoneyHHColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.ExpenMoneyHHColumn) = value
            End Set
        End Property
        
        Public Property AgentName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.AgentNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.AgentNameColumn) = value
            End Set
        End Property
        
        Public Property Charge_Cycle As String
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.Charge_CycleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.Charge_CycleColumn) = value
            End Set
        End Property
        
        Public Property ISDN As String
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.ISDNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.ISDNColumn) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property RealRevenue As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryPSTNDLReceiptsDetail.RealRevenueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryPSTNDLReceiptsDetail.RealRevenueColumn) = value
            End Set
        End Property
        
        Public Function IsRecei_DateNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.Recei_DateColumn)
        End Function
        
        Public Sub SetRecei_DateNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.Recei_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_NoDSNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.Recei_NoDSColumn)
        End Function
        
        Public Sub SetRecei_NoDSNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.Recei_NoDSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_NoTNDNNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.Recei_NoTNDNColumn)
        End Function
        
        Public Sub SetRecei_NoTNDNNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.Recei_NoTNDNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpen_NoNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.Expen_NoColumn)
        End Function
        
        Public Sub SetExpen_NoNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.Expen_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiMoneyDSNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyDSColumn)
        End Function
        
        Public Sub SetReceiMoneyDSNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyDSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiMoneyTNDNNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyTNDNColumn)
        End Function
        
        Public Sub SetReceiMoneyTNDNNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.ReceiMoneyTNDNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpenMoneyHHNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.ExpenMoneyHHColumn)
        End Function
        
        Public Sub SetExpenMoneyHHNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.ExpenMoneyHHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgentNameNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.AgentNameColumn)
        End Function
        
        Public Sub SetAgentNameNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.AgentNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CycleNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.Charge_CycleColumn)
        End Function
        
        Public Sub SetCharge_CycleNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.Charge_CycleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISDNNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.ISDNColumn)
        End Function
        
        Public Sub SetISDNNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.ISDNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRealRevenueNull() As Boolean
            Return Me.IsNull(Me.tableqryPSTNDLReceiptsDetail.RealRevenueColumn)
        End Function
        
        Public Sub SetRealRevenueNull()
            Me(Me.tableqryPSTNDLReceiptsDetail.RealRevenueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryPSTNDLReceiptsDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryPSTNDLReceiptsDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryPSTNDLReceiptsDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryPSTNDLReceiptsDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryReceiptsDetailByServiceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRecei_Date As DataColumn
        
        Private columnRecei_No As DataColumn
        
        Private columnCharge_Cycle As DataColumn
        
        Private columnRecei_Money As DataColumn
        
        Private columnVat As DataColumn
        
        Private columnSumofMoney As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnService_Code As DataColumn
        
        Private columnAccount_No As DataColumn
        
        Private columnMaLoaiThu As DataColumn
        
        Private columnInvoice_Quantity As DataColumn
        
        Friend Sub New()
            MyBase.New("qryReceiptsDetailByService")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Recei_DateColumn As DataColumn
            Get
                Return Me.columnRecei_Date
            End Get
        End Property
        
        Friend ReadOnly Property Recei_NoColumn As DataColumn
            Get
                Return Me.columnRecei_No
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CycleColumn As DataColumn
            Get
                Return Me.columnCharge_Cycle
            End Get
        End Property
        
        Friend ReadOnly Property Recei_MoneyColumn As DataColumn
            Get
                Return Me.columnRecei_Money
            End Get
        End Property
        
        Friend ReadOnly Property VatColumn As DataColumn
            Get
                Return Me.columnVat
            End Get
        End Property
        
        Friend ReadOnly Property SumofMoneyColumn As DataColumn
            Get
                Return Me.columnSumofMoney
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property Service_CodeColumn As DataColumn
            Get
                Return Me.columnService_Code
            End Get
        End Property
        
        Friend ReadOnly Property Account_NoColumn As DataColumn
            Get
                Return Me.columnAccount_No
            End Get
        End Property
        
        Friend ReadOnly Property MaLoaiThuColumn As DataColumn
            Get
                Return Me.columnMaLoaiThu
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityColumn As DataColumn
            Get
                Return Me.columnInvoice_Quantity
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryReceiptsDetailByServiceRow
            Get
                Return CType(Me.Rows(index),qryReceiptsDetailByServiceRow)
            End Get
        End Property
        
        Public Event qryReceiptsDetailByServiceRowChanged As qryReceiptsDetailByServiceRowChangeEventHandler
        
        Public Event qryReceiptsDetailByServiceRowChanging As qryReceiptsDetailByServiceRowChangeEventHandler
        
        Public Event qryReceiptsDetailByServiceRowDeleted As qryReceiptsDetailByServiceRowChangeEventHandler
        
        Public Event qryReceiptsDetailByServiceRowDeleting As qryReceiptsDetailByServiceRowChangeEventHandler
        
        Public Overloads Sub AddqryReceiptsDetailByServiceRow(ByVal row As qryReceiptsDetailByServiceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryReceiptsDetailByServiceRow(ByVal Recei_Date As Date, ByVal Recei_No As Long, ByVal Charge_Cycle As Date, ByVal Recei_Money As Double, ByVal Vat As Double, ByVal SumofMoney As Double, ByVal Employ_Code As String, ByVal Service_Code As String, ByVal Account_No As String, ByVal MaLoaiThu As String, ByVal Invoice_Quantity As Long) As qryReceiptsDetailByServiceRow
            Dim rowqryReceiptsDetailByServiceRow As qryReceiptsDetailByServiceRow = CType(Me.NewRow,qryReceiptsDetailByServiceRow)
            rowqryReceiptsDetailByServiceRow.ItemArray = New Object() {Recei_Date, Recei_No, Charge_Cycle, Recei_Money, Vat, SumofMoney, Employ_Code, Service_Code, Account_No, MaLoaiThu, Invoice_Quantity}
            Me.Rows.Add(rowqryReceiptsDetailByServiceRow)
            Return rowqryReceiptsDetailByServiceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryReceiptsDetailByServiceDataTable = CType(MyBase.Clone,qryReceiptsDetailByServiceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryReceiptsDetailByServiceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRecei_Date = Me.Columns("Recei_Date")
            Me.columnRecei_No = Me.Columns("Recei_No")
            Me.columnCharge_Cycle = Me.Columns("Charge_Cycle")
            Me.columnRecei_Money = Me.Columns("Recei_Money")
            Me.columnVat = Me.Columns("Vat")
            Me.columnSumofMoney = Me.Columns("SumofMoney")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnService_Code = Me.Columns("Service_Code")
            Me.columnAccount_No = Me.Columns("Account_No")
            Me.columnMaLoaiThu = Me.Columns("MaLoaiThu")
            Me.columnInvoice_Quantity = Me.Columns("Invoice_Quantity")
        End Sub
        
        Private Sub InitClass()
            Me.columnRecei_Date = New DataColumn("Recei_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Date)
            Me.columnRecei_No = New DataColumn("Recei_No", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_No)
            Me.columnCharge_Cycle = New DataColumn("Charge_Cycle", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Cycle)
            Me.columnRecei_Money = New DataColumn("Recei_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecei_Money)
            Me.columnVat = New DataColumn("Vat", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVat)
            Me.columnSumofMoney = New DataColumn("SumofMoney", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSumofMoney)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnService_Code = New DataColumn("Service_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Code)
            Me.columnAccount_No = New DataColumn("Account_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccount_No)
            Me.columnMaLoaiThu = New DataColumn("MaLoaiThu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaLoaiThu)
            Me.columnInvoice_Quantity = New DataColumn("Invoice_Quantity", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Quantity)
        End Sub
        
        Public Function NewqryReceiptsDetailByServiceRow() As qryReceiptsDetailByServiceRow
            Return CType(Me.NewRow,qryReceiptsDetailByServiceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryReceiptsDetailByServiceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryReceiptsDetailByServiceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryReceiptsDetailByServiceRowChangedEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailByServiceRowChanged(Me, New qryReceiptsDetailByServiceRowChangeEvent(CType(e.Row,qryReceiptsDetailByServiceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryReceiptsDetailByServiceRowChangingEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailByServiceRowChanging(Me, New qryReceiptsDetailByServiceRowChangeEvent(CType(e.Row,qryReceiptsDetailByServiceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryReceiptsDetailByServiceRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailByServiceRowDeleted(Me, New qryReceiptsDetailByServiceRowChangeEvent(CType(e.Row,qryReceiptsDetailByServiceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryReceiptsDetailByServiceRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryReceiptsDetailByServiceRowDeleting(Me, New qryReceiptsDetailByServiceRowChangeEvent(CType(e.Row,qryReceiptsDetailByServiceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryReceiptsDetailByServiceRow(ByVal row As qryReceiptsDetailByServiceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryReceiptsDetailByServiceRow
        Inherits DataRow
        
        Private tableqryReceiptsDetailByService As qryReceiptsDetailByServiceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryReceiptsDetailByService = CType(Me.Table,qryReceiptsDetailByServiceDataTable)
        End Sub
        
        Public Property Recei_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Recei_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Recei_DateColumn) = value
            End Set
        End Property
        
        Public Property Recei_No As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Recei_NoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Recei_NoColumn) = value
            End Set
        End Property
        
        Public Property Charge_Cycle As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Charge_CycleColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Charge_CycleColumn) = value
            End Set
        End Property
        
        Public Property Recei_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Recei_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Recei_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Vat As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.VatColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.VatColumn) = value
            End Set
        End Property
        
        Public Property SumofMoney As Double
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.SumofMoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.SumofMoneyColumn) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property Service_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Service_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Service_CodeColumn) = value
            End Set
        End Property
        
        Public Property Account_No As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Account_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Account_NoColumn) = value
            End Set
        End Property
        
        Public Property MaLoaiThu As String
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.MaLoaiThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.MaLoaiThuColumn) = value
            End Set
        End Property
        
        Public Property Invoice_Quantity As Long
            Get
                Try 
                    Return CType(Me(Me.tableqryReceiptsDetailByService.Invoice_QuantityColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryReceiptsDetailByService.Invoice_QuantityColumn) = value
            End Set
        End Property
        
        Public Function IsRecei_DateNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Recei_DateColumn)
        End Function
        
        Public Sub SetRecei_DateNull()
            Me(Me.tableqryReceiptsDetailByService.Recei_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_NoNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Recei_NoColumn)
        End Function
        
        Public Sub SetRecei_NoNull()
            Me(Me.tableqryReceiptsDetailByService.Recei_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CycleNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Charge_CycleColumn)
        End Function
        
        Public Sub SetCharge_CycleNull()
            Me(Me.tableqryReceiptsDetailByService.Charge_CycleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRecei_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Recei_MoneyColumn)
        End Function
        
        Public Sub SetRecei_MoneyNull()
            Me(Me.tableqryReceiptsDetailByService.Recei_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVatNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.VatColumn)
        End Function
        
        Public Sub SetVatNull()
            Me(Me.tableqryReceiptsDetailByService.VatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSumofMoneyNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.SumofMoneyColumn)
        End Function
        
        Public Sub SetSumofMoneyNull()
            Me(Me.tableqryReceiptsDetailByService.SumofMoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableqryReceiptsDetailByService.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsService_CodeNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Service_CodeColumn)
        End Function
        
        Public Sub SetService_CodeNull()
            Me(Me.tableqryReceiptsDetailByService.Service_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccount_NoNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Account_NoColumn)
        End Function
        
        Public Sub SetAccount_NoNull()
            Me(Me.tableqryReceiptsDetailByService.Account_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaLoaiThuNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.MaLoaiThuColumn)
        End Function
        
        Public Sub SetMaLoaiThuNull()
            Me(Me.tableqryReceiptsDetailByService.MaLoaiThuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableqryReceiptsDetailByService.Invoice_QuantityColumn)
        End Function
        
        Public Sub SetInvoice_QuantityNull()
            Me(Me.tableqryReceiptsDetailByService.Invoice_QuantityColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryReceiptsDetailByServiceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryReceiptsDetailByServiceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryReceiptsDetailByServiceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryReceiptsDetailByServiceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
