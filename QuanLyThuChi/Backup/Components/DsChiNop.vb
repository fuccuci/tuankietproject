'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsChiNop
    Inherits DataSet
    
    Private tableQryReportsChiNop As QryReportsChiNopDataTable
    
    Private tablevalueNgay As valueNgayDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("QryReportsChiNop")) Is Nothing) Then
                Me.Tables.Add(New QryReportsChiNopDataTable(ds.Tables("QryReportsChiNop")))
            End If
            If (Not (ds.Tables("valueNgay")) Is Nothing) Then
                Me.Tables.Add(New valueNgayDataTable(ds.Tables("valueNgay")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QryReportsChiNop As QryReportsChiNopDataTable
        Get
            Return Me.tableQryReportsChiNop
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property valueNgay As valueNgayDataTable
        Get
            Return Me.tablevalueNgay
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsChiNop = CType(MyBase.Clone,DsChiNop)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("QryReportsChiNop")) Is Nothing) Then
            Me.Tables.Add(New QryReportsChiNopDataTable(ds.Tables("QryReportsChiNop")))
        End If
        If (Not (ds.Tables("valueNgay")) Is Nothing) Then
            Me.Tables.Add(New valueNgayDataTable(ds.Tables("valueNgay")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableQryReportsChiNop = CType(Me.Tables("QryReportsChiNop"),QryReportsChiNopDataTable)
        If (Not (Me.tableQryReportsChiNop) Is Nothing) Then
            Me.tableQryReportsChiNop.InitVars
        End If
        Me.tablevalueNgay = CType(Me.Tables("valueNgay"),valueNgayDataTable)
        If (Not (Me.tablevalueNgay) Is Nothing) Then
            Me.tablevalueNgay.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsChiNop"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsChiNop.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableQryReportsChiNop = New QryReportsChiNopDataTable
        Me.Tables.Add(Me.tableQryReportsChiNop)
        Me.tablevalueNgay = New valueNgayDataTable
        Me.Tables.Add(Me.tablevalueNgay)
    End Sub
    
    Private Function ShouldSerializeQryReportsChiNop() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializevalueNgay() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub QryReportsChiNopRowChangeEventHandler(ByVal sender As Object, ByVal e As QryReportsChiNopRowChangeEvent)
    
    Public Delegate Sub valueNgayRowChangeEventHandler(ByVal sender As Object, ByVal e As valueNgayRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryReportsChiNopDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnExpense_Date As DataColumn
        
        Private columnOrdinal_No As DataColumn
        
        Private columnDescriptions As DataColumn
        
        Private columnList_Quantity As DataColumn
        
        Private columnCharge_Cycle As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnAccount_No As DataColumn
        
        Private columnBank_Code As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnService_Code As DataColumn
        
        Private columnTotal_Money As DataColumn
        
        Private columnPay_No As DataColumn
        
        Friend Sub New()
            MyBase.New("QryReportsChiNop")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Expense_DateColumn As DataColumn
            Get
                Return Me.columnExpense_Date
            End Get
        End Property
        
        Friend ReadOnly Property Ordinal_NoColumn As DataColumn
            Get
                Return Me.columnOrdinal_No
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionsColumn As DataColumn
            Get
                Return Me.columnDescriptions
            End Get
        End Property
        
        Friend ReadOnly Property List_QuantityColumn As DataColumn
            Get
                Return Me.columnList_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CycleColumn As DataColumn
            Get
                Return Me.columnCharge_Cycle
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property Account_NoColumn As DataColumn
            Get
                Return Me.columnAccount_No
            End Get
        End Property
        
        Friend ReadOnly Property Bank_CodeColumn As DataColumn
            Get
                Return Me.columnBank_Code
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property Service_CodeColumn As DataColumn
            Get
                Return Me.columnService_Code
            End Get
        End Property
        
        Friend ReadOnly Property Total_MoneyColumn As DataColumn
            Get
                Return Me.columnTotal_Money
            End Get
        End Property
        
        Friend ReadOnly Property Pay_NoColumn As DataColumn
            Get
                Return Me.columnPay_No
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QryReportsChiNopRow
            Get
                Return CType(Me.Rows(index),QryReportsChiNopRow)
            End Get
        End Property
        
        Public Event QryReportsChiNopRowChanged As QryReportsChiNopRowChangeEventHandler
        
        Public Event QryReportsChiNopRowChanging As QryReportsChiNopRowChangeEventHandler
        
        Public Event QryReportsChiNopRowDeleted As QryReportsChiNopRowChangeEventHandler
        
        Public Event QryReportsChiNopRowDeleting As QryReportsChiNopRowChangeEventHandler
        
        Public Overloads Sub AddQryReportsChiNopRow(ByVal row As QryReportsChiNopRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQryReportsChiNopRow(ByVal Expense_Date As Date, ByVal Ordinal_No As Short, ByVal Descriptions As String, ByVal List_Quantity As Short, ByVal Charge_Cycle As String, ByVal Employ_Code As String, ByVal Account_No As String, ByVal Bank_Code As String, ByVal Status As Boolean, ByVal Service_Code As String, ByVal Total_Money As Double, ByVal Pay_No As Short) As QryReportsChiNopRow
            Dim rowQryReportsChiNopRow As QryReportsChiNopRow = CType(Me.NewRow,QryReportsChiNopRow)
            rowQryReportsChiNopRow.ItemArray = New Object() {Expense_Date, Ordinal_No, Descriptions, List_Quantity, Charge_Cycle, Employ_Code, Account_No, Bank_Code, Status, Service_Code, Total_Money, Pay_No}
            Me.Rows.Add(rowQryReportsChiNopRow)
            Return rowQryReportsChiNopRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QryReportsChiNopDataTable = CType(MyBase.Clone,QryReportsChiNopDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QryReportsChiNopDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnExpense_Date = Me.Columns("Expense_Date")
            Me.columnOrdinal_No = Me.Columns("Ordinal_No")
            Me.columnDescriptions = Me.Columns("Descriptions")
            Me.columnList_Quantity = Me.Columns("List_Quantity")
            Me.columnCharge_Cycle = Me.Columns("Charge_Cycle")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnAccount_No = Me.Columns("Account_No")
            Me.columnBank_Code = Me.Columns("Bank_Code")
            Me.columnStatus = Me.Columns("Status")
            Me.columnService_Code = Me.Columns("Service_Code")
            Me.columnTotal_Money = Me.Columns("Total_Money")
            Me.columnPay_No = Me.Columns("Pay_No")
        End Sub
        
        Private Sub InitClass()
            Me.columnExpense_Date = New DataColumn("Expense_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpense_Date)
            Me.columnOrdinal_No = New DataColumn("Ordinal_No", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinal_No)
            Me.columnDescriptions = New DataColumn("Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptions)
            Me.columnList_Quantity = New DataColumn("List_Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_Quantity)
            Me.columnCharge_Cycle = New DataColumn("Charge_Cycle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Cycle)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnAccount_No = New DataColumn("Account_No", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccount_No)
            Me.columnBank_Code = New DataColumn("Bank_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBank_Code)
            Me.columnStatus = New DataColumn("Status", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnService_Code = New DataColumn("Service_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Code)
            Me.columnTotal_Money = New DataColumn("Total_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal_Money)
            Me.columnPay_No = New DataColumn("Pay_No", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPay_No)
        End Sub
        
        Public Function NewQryReportsChiNopRow() As QryReportsChiNopRow
            Return CType(Me.NewRow,QryReportsChiNopRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QryReportsChiNopRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QryReportsChiNopRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QryReportsChiNopRowChangedEvent) Is Nothing) Then
                RaiseEvent QryReportsChiNopRowChanged(Me, New QryReportsChiNopRowChangeEvent(CType(e.Row,QryReportsChiNopRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QryReportsChiNopRowChangingEvent) Is Nothing) Then
                RaiseEvent QryReportsChiNopRowChanging(Me, New QryReportsChiNopRowChangeEvent(CType(e.Row,QryReportsChiNopRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QryReportsChiNopRowDeletedEvent) Is Nothing) Then
                RaiseEvent QryReportsChiNopRowDeleted(Me, New QryReportsChiNopRowChangeEvent(CType(e.Row,QryReportsChiNopRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QryReportsChiNopRowDeletingEvent) Is Nothing) Then
                RaiseEvent QryReportsChiNopRowDeleting(Me, New QryReportsChiNopRowChangeEvent(CType(e.Row,QryReportsChiNopRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQryReportsChiNopRow(ByVal row As QryReportsChiNopRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryReportsChiNopRow
        Inherits DataRow
        
        Private tableQryReportsChiNop As QryReportsChiNopDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQryReportsChiNop = CType(Me.Table,QryReportsChiNopDataTable)
        End Sub
        
        Public Property Expense_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Expense_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Expense_DateColumn) = value
            End Set
        End Property
        
        Public Property Ordinal_No As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Ordinal_NoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Ordinal_NoColumn) = value
            End Set
        End Property
        
        Public Property Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property List_Quantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.List_QuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.List_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Charge_Cycle As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Charge_CycleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Charge_CycleColumn) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property Account_No As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Account_NoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Account_NoColumn) = value
            End Set
        End Property
        
        Public Property Bank_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Bank_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Bank_CodeColumn) = value
            End Set
        End Property
        
        Public Property Status As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.StatusColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.StatusColumn) = value
            End Set
        End Property
        
        Public Property Service_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Service_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Service_CodeColumn) = value
            End Set
        End Property
        
        Public Property Total_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Total_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Total_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Pay_No As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryReportsChiNop.Pay_NoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryReportsChiNop.Pay_NoColumn) = value
            End Set
        End Property
        
        Public Function IsExpense_DateNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Expense_DateColumn)
        End Function
        
        Public Sub SetExpense_DateNull()
            Me(Me.tableQryReportsChiNop.Expense_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdinal_NoNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Ordinal_NoColumn)
        End Function
        
        Public Sub SetOrdinal_NoNull()
            Me(Me.tableQryReportsChiNop.Ordinal_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.DescriptionsColumn)
        End Function
        
        Public Sub SetDescriptionsNull()
            Me(Me.tableQryReportsChiNop.DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.List_QuantityColumn)
        End Function
        
        Public Sub SetList_QuantityNull()
            Me(Me.tableQryReportsChiNop.List_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CycleNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Charge_CycleColumn)
        End Function
        
        Public Sub SetCharge_CycleNull()
            Me(Me.tableQryReportsChiNop.Charge_CycleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableQryReportsChiNop.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccount_NoNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Account_NoColumn)
        End Function
        
        Public Sub SetAccount_NoNull()
            Me(Me.tableQryReportsChiNop.Account_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBank_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Bank_CodeColumn)
        End Function
        
        Public Sub SetBank_CodeNull()
            Me(Me.tableQryReportsChiNop.Bank_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.tableQryReportsChiNop.StatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsService_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Service_CodeColumn)
        End Function
        
        Public Sub SetService_CodeNull()
            Me(Me.tableQryReportsChiNop.Service_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotal_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Total_MoneyColumn)
        End Function
        
        Public Sub SetTotal_MoneyNull()
            Me(Me.tableQryReportsChiNop.Total_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPay_NoNull() As Boolean
            Return Me.IsNull(Me.tableQryReportsChiNop.Pay_NoColumn)
        End Function
        
        Public Sub SetPay_NoNull()
            Me(Me.tableQryReportsChiNop.Pay_NoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryReportsChiNopRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QryReportsChiNopRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QryReportsChiNopRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QryReportsChiNopRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class valueNgayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTuNgay As DataColumn
        
        Private columnDenNgay As DataColumn
        
        Friend Sub New()
            MyBase.New("valueNgay")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TuNgayColumn As DataColumn
            Get
                Return Me.columnTuNgay
            End Get
        End Property
        
        Friend ReadOnly Property DenNgayColumn As DataColumn
            Get
                Return Me.columnDenNgay
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As valueNgayRow
            Get
                Return CType(Me.Rows(index),valueNgayRow)
            End Get
        End Property
        
        Public Event valueNgayRowChanged As valueNgayRowChangeEventHandler
        
        Public Event valueNgayRowChanging As valueNgayRowChangeEventHandler
        
        Public Event valueNgayRowDeleted As valueNgayRowChangeEventHandler
        
        Public Event valueNgayRowDeleting As valueNgayRowChangeEventHandler
        
        Public Overloads Sub AddvalueNgayRow(ByVal row As valueNgayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddvalueNgayRow(ByVal TuNgay As String, ByVal DenNgay As String) As valueNgayRow
            Dim rowvalueNgayRow As valueNgayRow = CType(Me.NewRow,valueNgayRow)
            rowvalueNgayRow.ItemArray = New Object() {TuNgay, DenNgay}
            Me.Rows.Add(rowvalueNgayRow)
            Return rowvalueNgayRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As valueNgayDataTable = CType(MyBase.Clone,valueNgayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New valueNgayDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTuNgay = Me.Columns("TuNgay")
            Me.columnDenNgay = Me.Columns("DenNgay")
        End Sub
        
        Private Sub InitClass()
            Me.columnTuNgay = New DataColumn("TuNgay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTuNgay)
            Me.columnDenNgay = New DataColumn("DenNgay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDenNgay)
        End Sub
        
        Public Function NewvalueNgayRow() As valueNgayRow
            Return CType(Me.NewRow,valueNgayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New valueNgayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(valueNgayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.valueNgayRowChangedEvent) Is Nothing) Then
                RaiseEvent valueNgayRowChanged(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.valueNgayRowChangingEvent) Is Nothing) Then
                RaiseEvent valueNgayRowChanging(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.valueNgayRowDeletedEvent) Is Nothing) Then
                RaiseEvent valueNgayRowDeleted(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.valueNgayRowDeletingEvent) Is Nothing) Then
                RaiseEvent valueNgayRowDeleting(Me, New valueNgayRowChangeEvent(CType(e.Row,valueNgayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovevalueNgayRow(ByVal row As valueNgayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class valueNgayRow
        Inherits DataRow
        
        Private tablevalueNgay As valueNgayDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablevalueNgay = CType(Me.Table,valueNgayDataTable)
        End Sub
        
        Public Property TuNgay As String
            Get
                Try 
                    Return CType(Me(Me.tablevalueNgay.TuNgayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevalueNgay.TuNgayColumn) = value
            End Set
        End Property
        
        Public Property DenNgay As String
            Get
                Try 
                    Return CType(Me(Me.tablevalueNgay.DenNgayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevalueNgay.DenNgayColumn) = value
            End Set
        End Property
        
        Public Function IsTuNgayNull() As Boolean
            Return Me.IsNull(Me.tablevalueNgay.TuNgayColumn)
        End Function
        
        Public Sub SetTuNgayNull()
            Me(Me.tablevalueNgay.TuNgayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDenNgayNull() As Boolean
            Return Me.IsNull(Me.tablevalueNgay.DenNgayColumn)
        End Function
        
        Public Sub SetDenNgayNull()
            Me(Me.tablevalueNgay.DenNgayColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class valueNgayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As valueNgayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As valueNgayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As valueNgayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
