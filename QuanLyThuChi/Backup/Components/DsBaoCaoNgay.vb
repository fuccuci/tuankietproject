'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsBaoCaoNgay
    Inherits DataSet
    
    Private tableqryCountry As qryCountryDataTable
    
    Private tableqryNgay As qryNgayDataTable
    
    Private tableQryBaoCaoNgay As QryBaoCaoNgayDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("qryCountry")) Is Nothing) Then
                Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
            End If
            If (Not (ds.Tables("qryNgay")) Is Nothing) Then
                Me.Tables.Add(New qryNgayDataTable(ds.Tables("qryNgay")))
            End If
            If (Not (ds.Tables("QryBaoCaoNgay")) Is Nothing) Then
                Me.Tables.Add(New QryBaoCaoNgayDataTable(ds.Tables("QryBaoCaoNgay")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryCountry As qryCountryDataTable
        Get
            Return Me.tableqryCountry
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qryNgay As qryNgayDataTable
        Get
            Return Me.tableqryNgay
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QryBaoCaoNgay As QryBaoCaoNgayDataTable
        Get
            Return Me.tableQryBaoCaoNgay
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsBaoCaoNgay = CType(MyBase.Clone,DsBaoCaoNgay)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("qryCountry")) Is Nothing) Then
            Me.Tables.Add(New qryCountryDataTable(ds.Tables("qryCountry")))
        End If
        If (Not (ds.Tables("qryNgay")) Is Nothing) Then
            Me.Tables.Add(New qryNgayDataTable(ds.Tables("qryNgay")))
        End If
        If (Not (ds.Tables("QryBaoCaoNgay")) Is Nothing) Then
            Me.Tables.Add(New QryBaoCaoNgayDataTable(ds.Tables("QryBaoCaoNgay")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableqryCountry = CType(Me.Tables("qryCountry"),qryCountryDataTable)
        If (Not (Me.tableqryCountry) Is Nothing) Then
            Me.tableqryCountry.InitVars
        End If
        Me.tableqryNgay = CType(Me.Tables("qryNgay"),qryNgayDataTable)
        If (Not (Me.tableqryNgay) Is Nothing) Then
            Me.tableqryNgay.InitVars
        End If
        Me.tableQryBaoCaoNgay = CType(Me.Tables("QryBaoCaoNgay"),QryBaoCaoNgayDataTable)
        If (Not (Me.tableQryBaoCaoNgay) Is Nothing) Then
            Me.tableQryBaoCaoNgay.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsBaoCaoNgay"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsBaoCaoNgay.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableqryCountry = New qryCountryDataTable
        Me.Tables.Add(Me.tableqryCountry)
        Me.tableqryNgay = New qryNgayDataTable
        Me.Tables.Add(Me.tableqryNgay)
        Me.tableQryBaoCaoNgay = New QryBaoCaoNgayDataTable
        Me.Tables.Add(Me.tableQryBaoCaoNgay)
    End Sub
    
    Private Function ShouldSerializeqryCountry() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeqryNgay() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQryBaoCaoNgay() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub qryCountryRowChangeEventHandler(ByVal sender As Object, ByVal e As qryCountryRowChangeEvent)
    
    Public Delegate Sub qryNgayRowChangeEventHandler(ByVal sender As Object, ByVal e As qryNgayRowChangeEvent)
    
    Public Delegate Sub QryBaoCaoNgayRowChangeEventHandler(ByVal sender As Object, ByVal e As QryBaoCaoNgayRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCountryName As DataColumn
        
        Private columnStationName As DataColumn
        
        Friend Sub New()
            MyBase.New("qryCountry")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CountryNameColumn As DataColumn
            Get
                Return Me.columnCountryName
            End Get
        End Property
        
        Friend ReadOnly Property StationNameColumn As DataColumn
            Get
                Return Me.columnStationName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryCountryRow
            Get
                Return CType(Me.Rows(index),qryCountryRow)
            End Get
        End Property
        
        Public Event qryCountryRowChanged As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowChanging As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleted As qryCountryRowChangeEventHandler
        
        Public Event qryCountryRowDeleting As qryCountryRowChangeEventHandler
        
        Public Overloads Sub AddqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryCountryRow(ByVal CountryName As String, ByVal StationName As String) As qryCountryRow
            Dim rowqryCountryRow As qryCountryRow = CType(Me.NewRow,qryCountryRow)
            rowqryCountryRow.ItemArray = New Object() {CountryName, StationName}
            Me.Rows.Add(rowqryCountryRow)
            Return rowqryCountryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryCountryDataTable = CType(MyBase.Clone,qryCountryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryCountryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCountryName = Me.Columns("CountryName")
            Me.columnStationName = Me.Columns("StationName")
        End Sub
        
        Private Sub InitClass()
            Me.columnCountryName = New DataColumn("CountryName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryName)
            Me.columnStationName = New DataColumn("StationName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStationName)
        End Sub
        
        Public Function NewqryCountryRow() As qryCountryRow
            Return CType(Me.NewRow,qryCountryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryCountryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryCountryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryCountryRowChangedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanged(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryCountryRowChangingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowChanging(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryCountryRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleted(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryCountryRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryCountryRowDeleting(Me, New qryCountryRowChangeEvent(CType(e.Row,qryCountryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryCountryRow(ByVal row As qryCountryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRow
        Inherits DataRow
        
        Private tableqryCountry As qryCountryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryCountry = CType(Me.Table,qryCountryDataTable)
        End Sub
        
        Public Property CountryName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.CountryNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.CountryNameColumn) = value
            End Set
        End Property
        
        Public Property StationName As String
            Get
                Try 
                    Return CType(Me(Me.tableqryCountry.StationNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryCountry.StationNameColumn) = value
            End Set
        End Property
        
        Public Function IsCountryNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.CountryNameColumn)
        End Function
        
        Public Sub SetCountryNameNull()
            Me(Me.tableqryCountry.CountryNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStationNameNull() As Boolean
            Return Me.IsNull(Me.tableqryCountry.StationNameColumn)
        End Function
        
        Public Sub SetStationNameNull()
            Me(Me.tableqryCountry.StationNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryCountryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryCountryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryCountryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryCountryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfromDate As DataColumn
        
        Private columntoDate As DataColumn
        
        Friend Sub New()
            MyBase.New("qryNgay")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fromDateColumn As DataColumn
            Get
                Return Me.columnfromDate
            End Get
        End Property
        
        Friend ReadOnly Property toDateColumn As DataColumn
            Get
                Return Me.columntoDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As qryNgayRow
            Get
                Return CType(Me.Rows(index),qryNgayRow)
            End Get
        End Property
        
        Public Event qryNgayRowChanged As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowChanging As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowDeleted As qryNgayRowChangeEventHandler
        
        Public Event qryNgayRowDeleting As qryNgayRowChangeEventHandler
        
        Public Overloads Sub AddqryNgayRow(ByVal row As qryNgayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddqryNgayRow(ByVal fromDate As Date, ByVal toDate As Date) As qryNgayRow
            Dim rowqryNgayRow As qryNgayRow = CType(Me.NewRow,qryNgayRow)
            rowqryNgayRow.ItemArray = New Object() {fromDate, toDate}
            Me.Rows.Add(rowqryNgayRow)
            Return rowqryNgayRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As qryNgayDataTable = CType(MyBase.Clone,qryNgayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New qryNgayDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfromDate = Me.Columns("fromDate")
            Me.columntoDate = Me.Columns("toDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnfromDate = New DataColumn("fromDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromDate)
            Me.columntoDate = New DataColumn("toDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntoDate)
        End Sub
        
        Public Function NewqryNgayRow() As qryNgayRow
            Return CType(Me.NewRow,qryNgayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New qryNgayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(qryNgayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qryNgayRowChangedEvent) Is Nothing) Then
                RaiseEvent qryNgayRowChanged(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qryNgayRowChangingEvent) Is Nothing) Then
                RaiseEvent qryNgayRowChanging(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qryNgayRowDeletedEvent) Is Nothing) Then
                RaiseEvent qryNgayRowDeleted(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qryNgayRowDeletingEvent) Is Nothing) Then
                RaiseEvent qryNgayRowDeleting(Me, New qryNgayRowChangeEvent(CType(e.Row,qryNgayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveqryNgayRow(ByVal row As qryNgayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayRow
        Inherits DataRow
        
        Private tableqryNgay As qryNgayDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableqryNgay = CType(Me.Table,qryNgayDataTable)
        End Sub
        
        Public Property fromDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryNgay.fromDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNgay.fromDateColumn) = value
            End Set
        End Property
        
        Public Property toDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableqryNgay.toDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqryNgay.toDateColumn) = value
            End Set
        End Property
        
        Public Function IsfromDateNull() As Boolean
            Return Me.IsNull(Me.tableqryNgay.fromDateColumn)
        End Function
        
        Public Sub SetfromDateNull()
            Me(Me.tableqryNgay.fromDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstoDateNull() As Boolean
            Return Me.IsNull(Me.tableqryNgay.toDateColumn)
        End Function
        
        Public Sub SettoDateNull()
            Me(Me.tableqryNgay.toDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class qryNgayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As qryNgayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As qryNgayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As qryNgayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryBaoCaoNgayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnReceipt_Date As DataColumn
        
        Private columnOrdinal_No As DataColumn
        
        Private columnService_Code As DataColumn
        
        Private columnList_Quantity As DataColumn
        
        Private columnInvoice_Quantity As DataColumn
        
        Private columnCharge_Cycle As DataColumn
        
        Private columnTotal_Money As DataColumn
        
        Private columnEmploy_Code As DataColumn
        
        Private columnMaLoaiThu As DataColumn
        
        Friend Sub New()
            MyBase.New("QryBaoCaoNgay")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Receipt_DateColumn As DataColumn
            Get
                Return Me.columnReceipt_Date
            End Get
        End Property
        
        Friend ReadOnly Property Ordinal_NoColumn As DataColumn
            Get
                Return Me.columnOrdinal_No
            End Get
        End Property
        
        Friend ReadOnly Property Service_CodeColumn As DataColumn
            Get
                Return Me.columnService_Code
            End Get
        End Property
        
        Friend ReadOnly Property List_QuantityColumn As DataColumn
            Get
                Return Me.columnList_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Invoice_QuantityColumn As DataColumn
            Get
                Return Me.columnInvoice_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Charge_CycleColumn As DataColumn
            Get
                Return Me.columnCharge_Cycle
            End Get
        End Property
        
        Friend ReadOnly Property Total_MoneyColumn As DataColumn
            Get
                Return Me.columnTotal_Money
            End Get
        End Property
        
        Friend ReadOnly Property Employ_CodeColumn As DataColumn
            Get
                Return Me.columnEmploy_Code
            End Get
        End Property
        
        Friend ReadOnly Property MaLoaiThuColumn As DataColumn
            Get
                Return Me.columnMaLoaiThu
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QryBaoCaoNgayRow
            Get
                Return CType(Me.Rows(index),QryBaoCaoNgayRow)
            End Get
        End Property
        
        Public Event QryBaoCaoNgayRowChanged As QryBaoCaoNgayRowChangeEventHandler
        
        Public Event QryBaoCaoNgayRowChanging As QryBaoCaoNgayRowChangeEventHandler
        
        Public Event QryBaoCaoNgayRowDeleted As QryBaoCaoNgayRowChangeEventHandler
        
        Public Event QryBaoCaoNgayRowDeleting As QryBaoCaoNgayRowChangeEventHandler
        
        Public Overloads Sub AddQryBaoCaoNgayRow(ByVal row As QryBaoCaoNgayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQryBaoCaoNgayRow(ByVal Receipt_Date As Date, ByVal Ordinal_No As Short, ByVal Service_Code As String, ByVal List_Quantity As Short, ByVal Invoice_Quantity As Short, ByVal Charge_Cycle As String, ByVal Total_Money As Double, ByVal Employ_Code As String, ByVal MaLoaiThu As String) As QryBaoCaoNgayRow
            Dim rowQryBaoCaoNgayRow As QryBaoCaoNgayRow = CType(Me.NewRow,QryBaoCaoNgayRow)
            rowQryBaoCaoNgayRow.ItemArray = New Object() {Receipt_Date, Ordinal_No, Service_Code, List_Quantity, Invoice_Quantity, Charge_Cycle, Total_Money, Employ_Code, MaLoaiThu}
            Me.Rows.Add(rowQryBaoCaoNgayRow)
            Return rowQryBaoCaoNgayRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QryBaoCaoNgayDataTable = CType(MyBase.Clone,QryBaoCaoNgayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QryBaoCaoNgayDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnReceipt_Date = Me.Columns("Receipt_Date")
            Me.columnOrdinal_No = Me.Columns("Ordinal_No")
            Me.columnService_Code = Me.Columns("Service_Code")
            Me.columnList_Quantity = Me.Columns("List_Quantity")
            Me.columnInvoice_Quantity = Me.Columns("Invoice_Quantity")
            Me.columnCharge_Cycle = Me.Columns("Charge_Cycle")
            Me.columnTotal_Money = Me.Columns("Total_Money")
            Me.columnEmploy_Code = Me.Columns("Employ_Code")
            Me.columnMaLoaiThu = Me.Columns("MaLoaiThu")
        End Sub
        
        Private Sub InitClass()
            Me.columnReceipt_Date = New DataColumn("Receipt_Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceipt_Date)
            Me.columnOrdinal_No = New DataColumn("Ordinal_No", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrdinal_No)
            Me.columnService_Code = New DataColumn("Service_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnService_Code)
            Me.columnList_Quantity = New DataColumn("List_Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnList_Quantity)
            Me.columnInvoice_Quantity = New DataColumn("Invoice_Quantity", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoice_Quantity)
            Me.columnCharge_Cycle = New DataColumn("Charge_Cycle", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharge_Cycle)
            Me.columnTotal_Money = New DataColumn("Total_Money", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal_Money)
            Me.columnEmploy_Code = New DataColumn("Employ_Code", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmploy_Code)
            Me.columnMaLoaiThu = New DataColumn("MaLoaiThu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaLoaiThu)
        End Sub
        
        Public Function NewQryBaoCaoNgayRow() As QryBaoCaoNgayRow
            Return CType(Me.NewRow,QryBaoCaoNgayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QryBaoCaoNgayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QryBaoCaoNgayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QryBaoCaoNgayRowChangedEvent) Is Nothing) Then
                RaiseEvent QryBaoCaoNgayRowChanged(Me, New QryBaoCaoNgayRowChangeEvent(CType(e.Row,QryBaoCaoNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QryBaoCaoNgayRowChangingEvent) Is Nothing) Then
                RaiseEvent QryBaoCaoNgayRowChanging(Me, New QryBaoCaoNgayRowChangeEvent(CType(e.Row,QryBaoCaoNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QryBaoCaoNgayRowDeletedEvent) Is Nothing) Then
                RaiseEvent QryBaoCaoNgayRowDeleted(Me, New QryBaoCaoNgayRowChangeEvent(CType(e.Row,QryBaoCaoNgayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QryBaoCaoNgayRowDeletingEvent) Is Nothing) Then
                RaiseEvent QryBaoCaoNgayRowDeleting(Me, New QryBaoCaoNgayRowChangeEvent(CType(e.Row,QryBaoCaoNgayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQryBaoCaoNgayRow(ByVal row As QryBaoCaoNgayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryBaoCaoNgayRow
        Inherits DataRow
        
        Private tableQryBaoCaoNgay As QryBaoCaoNgayDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQryBaoCaoNgay = CType(Me.Table,QryBaoCaoNgayDataTable)
        End Sub
        
        Public Property Receipt_Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.Receipt_DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.Receipt_DateColumn) = value
            End Set
        End Property
        
        Public Property Ordinal_No As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.Ordinal_NoColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.Ordinal_NoColumn) = value
            End Set
        End Property
        
        Public Property Service_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.Service_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.Service_CodeColumn) = value
            End Set
        End Property
        
        Public Property List_Quantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.List_QuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.List_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Invoice_Quantity As Short
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.Invoice_QuantityColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.Invoice_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Charge_Cycle As String
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.Charge_CycleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.Charge_CycleColumn) = value
            End Set
        End Property
        
        Public Property Total_Money As Double
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.Total_MoneyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.Total_MoneyColumn) = value
            End Set
        End Property
        
        Public Property Employ_Code As String
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.Employ_CodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.Employ_CodeColumn) = value
            End Set
        End Property
        
        Public Property MaLoaiThu As String
            Get
                Try 
                    Return CType(Me(Me.tableQryBaoCaoNgay.MaLoaiThuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQryBaoCaoNgay.MaLoaiThuColumn) = value
            End Set
        End Property
        
        Public Function IsReceipt_DateNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.Receipt_DateColumn)
        End Function
        
        Public Sub SetReceipt_DateNull()
            Me(Me.tableQryBaoCaoNgay.Receipt_DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrdinal_NoNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.Ordinal_NoColumn)
        End Function
        
        Public Sub SetOrdinal_NoNull()
            Me(Me.tableQryBaoCaoNgay.Ordinal_NoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsService_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.Service_CodeColumn)
        End Function
        
        Public Sub SetService_CodeNull()
            Me(Me.tableQryBaoCaoNgay.Service_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsList_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.List_QuantityColumn)
        End Function
        
        Public Sub SetList_QuantityNull()
            Me(Me.tableQryBaoCaoNgay.List_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoice_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.Invoice_QuantityColumn)
        End Function
        
        Public Sub SetInvoice_QuantityNull()
            Me(Me.tableQryBaoCaoNgay.Invoice_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCharge_CycleNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.Charge_CycleColumn)
        End Function
        
        Public Sub SetCharge_CycleNull()
            Me(Me.tableQryBaoCaoNgay.Charge_CycleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotal_MoneyNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.Total_MoneyColumn)
        End Function
        
        Public Sub SetTotal_MoneyNull()
            Me(Me.tableQryBaoCaoNgay.Total_MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmploy_CodeNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.Employ_CodeColumn)
        End Function
        
        Public Sub SetEmploy_CodeNull()
            Me(Me.tableQryBaoCaoNgay.Employ_CodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaLoaiThuNull() As Boolean
            Return Me.IsNull(Me.tableQryBaoCaoNgay.MaLoaiThuColumn)
        End Function
        
        Public Sub SetMaLoaiThuNull()
            Me(Me.tableQryBaoCaoNgay.MaLoaiThuColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QryBaoCaoNgayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QryBaoCaoNgayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QryBaoCaoNgayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QryBaoCaoNgayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
